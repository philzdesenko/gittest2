{"job":{"components":{"82118":{"id":82118,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":631604974,"x":288,"y":0,"width":32,"height":32,"inputConnectorIDs":[82123],"outputSuccessConnectorIDs":[82122],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"JDBC Table Metadata To Grid 0"}}}},"visible":true},"2":{"slot":2,"name":"Database Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"PostgreSQL"}}}},"visible":true},"3":{"slot":3,"name":"Connection URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"jdbc:postgresql://${pg_host}/${pg_db}"}}}},"visible":true},"4":{"slot":4,"name":"Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${pg_user}"}}}},"visible":true},"5":{"slot":5,"name":"Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${tokenV}"}}}},"visible":true},"6":{"slot":6,"name":"Connection Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sslmode"},"2":{"slot":2,"type":"STRING","value":"require"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"password"},"2":{"slot":2,"type":"STRING","value":"${tokenV}"}}}},"visible":true},"7":{"slot":7,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${schema}"}}}},"visible":true},"8":{"slot":8,"name":"Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${table}"}}}},"visible":true},"9":{"slot":9,"name":"Grid Variable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"source_table_info"}}}},"visible":true},"10":{"slot":10,"name":"Grid Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Name"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Type"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"Size"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"Precision"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"Primary Key"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"Nullable"}}},"7":{"slot":7,"values":{"1":{"slot":1,"type":"STRING","value":"Source Size"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"82119":{"id":82119,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[82125],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"82120":{"id":82120,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":128,"y":0,"width":32,"height":32,"inputConnectorIDs":[82125],"outputSuccessConnectorIDs":[82123],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get Connection Details"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nimport psycopg2\nimport sys\nimport boto3\nimport os\nimport botocore\nimport datetime\nfrom dateutil.tz import tzlocal\nimport socket\n\ndef get_secret(name):\n    secret_base = \"airflow/connection/\"\n    secret_name = secret_base + name\n    region_name = \"eu-west-1\"\n\n    session = boto3.session.Session()\n    client = session.client(\n        service_name='secretsmanager',\n        region_name=region_name,\n    )\n\n    try:\n        get_secret_value_response = client.get_secret_value(\n            SecretId=secret_name\n        )\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            print(\"The requested secret \" + secret_name + \" was not found\")\n        elif e.response['Error']['Code'] == 'InvalidRequestException':\n            print(\"The request was invalid due to:\", e)\n        elif e.response['Error']['Code'] == 'InvalidParameterException':\n            print(\"The request had invalid params:\", e)\n        elif e.response['Error']['Code'] == 'DecryptionFailure':\n            print(\"The requested secret can't be decrypted using the provided KMS key:\", e)\n        elif e.response['Error']['Code'] == 'InternalServiceError':\n            print(\"An error occurred on service side:\", e)\n    else:\n        # Secrets Manager decrypts the secret value using the associated KMS CMK\n        # Depending on whether the secret was a string or binary, only one of these fields will be populated\n        if 'SecretString' in get_secret_value_response:\n            text_secret_data = get_secret_value_response['SecretString']\n        else:\n            binary_secret_data = get_secret_value_response['SecretBinary']\n\n        return get_secret_value_response\n      \n      \ndef assumed_role_session(role_arn: str, base_session: botocore.session.Session = None):\n    base_session = base_session or boto3.session.Session()._session\n    fetcher = botocore.credentials.AssumeRoleCredentialFetcher(\n        client_creator = base_session.create_client,\n        source_credentials = base_session.get_credentials(),\n        role_arn = role_arn,\n        extra_args = {\n        #    'RoleSessionName': None # set this if you want something non-default\n        }\n    )\n    creds = botocore.credentials.DeferredRefreshableCredentials(\n        method = 'assume-role',\n        refresh_using = fetcher.fetch_credentials,\n        time_fetcher = lambda: datetime.datetime.now(tzlocal())\n    )\n    botocore_session = botocore.session.Session()\n    botocore_session._credentials = creds\n    return boto3.Session(botocore_session = botocore_session)\n\ndef main():\n\n    sourceDB = 'monese_accountmanager'\n    pg_secret = json.loads(get_secret(f'postgres/{sourceDB}').get('SecretString'))\n    pg_host_alias = pg_secret.get('host')\n    pg_host_details = socket.gethostbyname_ex(pg_host_alias)\n    pg_ENDPOINT = pg_host_details[0]\n    pg_PORT=pg_secret.get('port')\n    pg_USER=pg_secret.get('user')\n    pg_DBNAME=pg_secret.get('database')\n\n    session = assumed_role_session(be_assumed_role)\n    client = session.client('rds',region_name=aws_region)\n    token = client.generate_db_auth_token(DBHostname=pg_ENDPOINT, Port=pg_PORT, DBUsername=pg_USER, Region=aws_region)\n    \n    context.updateVariable('pg_host', pg_ENDPOINT)\n    context.updateVariable('pg_port', pg_PORT)\n    context.updateVariable('pg_user', pg_USER)\n    context.updateVariable('pg_db', pg_DBNAME)\n    context.updateVariable('tokenV', token)\n    context.updateVariable('schema', 'public')\n    context.updateVariable('table', 'partner_transaction_reference') \n#    context.updateVariable('table', 'monese_account_product') \n\n    print(tokenV)\n    print(pg_host,pg_port,pg_user,pg_db)\n    print(pg_ENDPOINT,pg_PORT,pg_USER,pg_DBNAME)\n\nif __name__ == \"__main__\":\n    main()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"82121":{"id":82121,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":414,"y":-3,"width":32,"height":32,"inputConnectorIDs":[82122],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"show results"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nprint (context.getGridVariable('source_table_info'))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"82122":{"id":82122,"sourceID":82118,"targetID":82121},"82123":{"id":82123,"sourceID":82120,"targetID":82118}},"failureConnectors":{},"unconditionalConnectors":{"82125":{"id":82125,"sourceID":82119,"targetID":82120}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"pg_db":{"definition":{"name":"pg_db","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"monese_veriff"},"pg_host":{"definition":{"name":"pg_host","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"monese-dev-veriff-db1.cj5rgkvuiaup.eu-west-1.rds.amazonaws.com"},"pg_port":{"definition":{"name":"pg_port","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"5432"},"pg_user":{"definition":{"name":"pg_user","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"app_airflow_dev"},"schema":{"definition":{"name":"schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"public"},"table":{"definition":{"name":"table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"decision"},"tokenV":{"definition":{"name":"tokenV","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"monese-dev-veriff-db1.cj5rgkvuiaup.eu-west-1.rds.amazonaws.com:5432/?Action=connect&DBUser=app_airflow_dev&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA4BKWXQAFXVWVTTE4%2F20220520%2Feu-west-1%2Frds-db%2Faws4_request&X-Amz-Date=20220520T132827Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&X-Amz-Security-Token=FwoGZXIvYXdzED8aDCruVtjQ28qiPSlZhCK%2FAfck6xSul8wo0Z3WBXgD6N%2BIBb7gTH2t340khoIZldHlMml1ZgJ%2FNX59wfhpVGTU0NeP9ceXiyzk18dMrOARCnYJxr%2FvUHo%2FwraDjXTcUpeHEiJpLO1H%2Fc47tQC14XENLmDQ5AzGh2zp8FG7pCfP8OnEvjhrDvUlgvFFGSg9bIyHx8uPAaUDsgwhysLaFNiBKWS8pDNuHAQ6M4hkdWAsdgpEwiQoSe8HX86TNdjQSIpiSLhQ2kBpgHWGwdrogWduKPuunpQGMi2oPPKs7txuVaRrFEbcadCccukemdmVWqg%2Fdd3TZaMF5G1ysqU44VFU0H8DcPk%3D&X-Amz-Signature=79f34ea4b4692f944fc07efe96e7a5bb27c047af231711c34d3eb74726a5f6df"}},"grids":{"source_table_info":{"definition":{"name":"source_table_info","scope":"BRANCH","definitions":[{"name":"Name","type":"TEXT"},{"name":"Type","type":"TEXT"},{"name":"Size","type":"TEXT"},{"name":"Precision","type":"TEXT"},{"name":"PK","type":"TEXT"},{"name":"nullable","type":"TEXT"},{"name":"ordinal","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"get source metadata - test - first","description":"","type":"ORCHESTRATION","tag":"193dbce6-4772-4a98-b6fc-6c742a6c36be"}}