{"job":{"components":{"81718":{"id":81718,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":0,"y":80,"width":32,"height":32,"inputConnectorIDs":[81735],"outputSuccessConnectorIDs":[81728],"outputFailureConnectorIDs":[81736],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Validate Azure parameters"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"print(f'azure_key_vault_url: {azure_key_vault_url!r}')\nprint(f'storage_account_key_secret: {storage_account_key_secret!r}')\n\nmissing_parameters = []\n\nif not azure_key_vault_url:\n    missing_parameters.append('Azure Key Vault URL')\n    \nif not storage_account_key_secret:\n    missing_parameters.append('Azure Blob Storage Account Key Secret')\n    \nif missing_parameters:\n    err_msg = ('The following shared job parameters were not set, but are '\n               f'required for Azure Blob Storage: {missing_parameters}')\n    raise Exception(err_msg)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81720":{"id":81720,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-320,"y":0,"width":32,"height":32,"inputConnectorIDs":[81737],"outputSuccessConnectorIDs":[81730],"outputFailureConnectorIDs":[81739],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Identify storage protocol"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if not cloud_storage_url[-1:] == '/':\n    cloud_storage_url = cloud_storage_url + '/'\n    \nprint(f'cloud_storage_url: {cloud_storage_url!r}')\nprint()\n\n# split the cloud_storage_url into protocol and host_path\nurl_list = cloud_storage_url.split('://', 1)\n\n# check we could split the string and extract a protocol\nif len(url_list) == 1:\n    err_msg = f'Unable to determine the protocol from the cloud_storage_url {cloud_storage_url!r}'\n    raise Exception(err_msg)\n\n# unpack the list\nprotocol, host_path = url_list\nprotocol = protocol.lower()\n\n# check protocol is supported\nsupported_protocols = ('azure', 's3')\nif protocol not in supported_protocols:\n    err_msg = f'The protocol {protocol!r} was identifed from the cloud_storage_url {cloud_storage_url!r}, but the only supported protocols are {\", \".join(supported_protocols)}'\n    raise Exception(err_msg)\n\nprint(f'protocol: {protocol!r}')\ncontext.updateVariable('protocol', protocol)\n\nprint(f'host_path: {host_path!r}')\ncontext.updateVariable('host_path', host_path)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81721":{"id":81721,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-480,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[81737],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81722":{"id":81722,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-160,"y":0,"width":32,"height":32,"inputConnectorIDs":[81730],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[81732],"outputFalseConnectorIDs":[81735],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Protocol is s3?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"protocol"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"s3"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81723":{"id":81723,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":0,"y":240,"width":32,"height":32,"inputConnectorIDs":[81736],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Azure Blob Storage parameters not set"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81724":{"id":81724,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":160,"y":0,"width":32,"height":32,"inputConnectorIDs":[81732],"outputSuccessConnectorIDs":[81733],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get list of versions from S3"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\nfrom decimal import Decimal \nfrom pprint import pprint\n\n\ndef get_common_prefixes(client, bucket, prefix, continuation_token=None):\n    \"\"\"\n    Wrapper for list_objects_v2 which returns all items when more than 1000\n    \n    Returns a list of dicts like [{'Prefix': 'niagara-shared-job-test/stage/postgres/'}]\n    \"\"\"\n    if continuation_token:\n        response = client.list_objects_v2(\n            Bucket=bucket, \n            Prefix=prefix, \n            Delimiter='/',\n            ContinuationToken=continuation_token,\n        )\n    else:\n        response = client.list_objects_v2(\n            Bucket=bucket, \n            Prefix=prefix, \n            Delimiter='/',\n        )\n        \n    common_prefixes = response.get('CommonPrefixes', list())\n    \n    if response.get('IsTruncated'):\n        continuation_token = response.get('NextContinuationToken')\n        common_prefixes.extend(\n            get_common_prefixes(client, bucket, prefix, continuation_token)\n        )\n        \n    return common_prefixes\n\n\ndef get_sub_paths(client, bucket, prefix):\n    \"\"\"\n    Extract list of paths from common_prefixes list\n    \"\"\"\n    common_prefixes = get_common_prefixes(client, bucket, prefix)\n    sub_paths = [c.get('Prefix') for c in common_prefixes]\n    return sub_paths\n\n\ndef get_versions(client, bucket, version_prefix):\n    \"\"\"\n    Extract list of versions from list of common_prefix paths\n    \"\"\"\n    version_paths = get_sub_paths(client, bucket, version_prefix)\n    \n    full_version_prefix = f'{version_prefix}version='\n    version_list = [v[len(full_version_prefix):-1] for v in version_paths]\n    \n    return version_list\n\n\ndef split_bucket_prefix(s):\n    \"\"\"\n    Take base_path and return list of [bucket, path]\n    \"\"\"\n    path_list = s.split('/', 1)\n    if len(path_list) == 1:\n        return path_list.append('')\n    else:\n        return path_list\n\n\ndef split_path(s, prefix):\n    \"\"\"\n    Split path into list of [<database>, <schema>, <table>]\n    \n    Input path has format '<prefix>database=<database>/schema=<schema>/table=<table>/'\n    \"\"\"\n    key_value_list = s[len(prefix):-1].split('/')\n    return [key_value.split('=', 1)[1] for key_value in key_value_list]\n\n\nclient = boto3.client('s3')\n\n# split stage_base into bucket and prefix\nbucket, prefix = split_bucket_prefix(host_path)\nprint(f'bucket: {bucket!r}')\nprint(f'prefix: {prefix!r}')\n\nversion_prefix = f'{prefix}database={source_database}/schema={source_schema}/table={source_table}/'\nprint(f'version_prefix: {version_prefix!r}')\nprint()\n\nall_version_list = get_versions(client, bucket, version_prefix)\nprint(f'all_version_list: {all_version_list}')\nprint(f'max_version: {max_version}')\n\n# filter all versions by max_version\nfiltered_version_list = [[Decimal(v)] for v in all_version_list if int(v) >= max_version]\nfiltered_version_list.sort()\n\n# add target_table_exists flag\n# for the first iteration, use the value of the target_table_exists job var\n# for further iterations, hard code target_table_exists to 1\nmetadata_versions = []\nfor counter, version in enumerate(filtered_version_list):\n    metadata_versions.append([\n        version[0],\n        target_table_exists if counter == 0 else Decimal('1') \n    ])\n  \nprint(f'metadata_versions: {metadata_versions}')\ncontext.updateGridVariable('metadata_versions', metadata_versions)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81725":{"id":81725,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-320,"y":240,"width":32,"height":32,"inputConnectorIDs":[81739],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Storage protocol not supported"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81726":{"id":81726,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":320,"y":0,"width":32,"height":32,"inputConnectorIDs":[81731,81733],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[81734],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Join paths"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81727":{"id":81727,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":480,"y":0,"width":32,"height":32,"inputConnectorIDs":[81734],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81729":{"id":81729,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":160,"y":80,"width":32,"height":32,"inputConnectorIDs":[81728],"outputSuccessConnectorIDs":[81731],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get list of tables from Azure"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"try:\n    from azure.identity import ManagedIdentityCredential\n    from azure.keyvault.secrets import SecretClient\n    from azure.storage.blob import BlobServiceClient\nexcept ModuleNotFoundError as e:\n    err_msg = ('Module not found. The following Python3 packages are '\n               'required: [azure-identity, azure-keyvault-secrets, azure-storage-blob]'\n               f'\\nException: {e!r}')\n    raise ModuleNotFoundError(err_msg)\n    \nfrom collections import namedtuple\nfrom decimal import Decimal \nfrom pprint import pprint \n\n\ndef get_versions(blobs, prefix):\n    \"\"\"\n    Extract a list of distinct 'version' from a list of blobs\n    \"\"\"\n    all_version_refs = []\n    for blob in blobs:\n        \n        # get blob name without 'prefix'\n        blob_name = blob.name[len(prefix):]\n        \n        # try to split blob_name into ['version=<database>', '....']\n        blob_path_list = blob_name.split('/', 1)\n        if len(blob_path_list) == 2:\n            version, _ = blob_path_list\n            all_version_refs.append(\n                version.split('=', 1)[1]\n            )\n        \n    # return distinct list of versions\n    return set(all_version_refs)\n    \n    \n# split host_path into account, container and prefix\naccount, container, prefix = host_path.split('/', 2)\nprint(f'account: {account!r}')\nprint(f'container: {container!r}')\nprint(f'prefix: {prefix!r}')\nprint()\n\nversion_prefix = f'{prefix}database={source_database}/schema={source_schema}/table={source_table}/'\nprint(f'version_prefix: {version_prefix!r}')\nprint()\n\n# lookup storage account key from Azure Key Vault\nprint(f'Attempting to read the storage account key from the secret {storage_account_key_secret!r} in the Key Vault {azure_key_vault_url!r}')\ncredential = ManagedIdentityCredential()\nkey_vault_client = SecretClient(vault_url=azure_key_vault_url, credential=credential)\nkey_vault_secret = key_vault_client.get_secret(storage_account_key_secret)\n\naccount_key = key_vault_secret.value\nprint('Successfully read storage account key')\nprint()\n\n# get list of blobs in container which start with prefix\nblob_service_client = BlobServiceClient(\n    account_url=f'https://{account}',\n    credential=account_key\n)\ncontainer_client = blob_service_client.get_container_client(container)\nblobs = container_client.list_blobs(name_starts_with=version_prefix)\n\nall_version_list = get_versions(blobs, version_prefix)\nprint(f'all_version_list: {all_version_list}')\nprint(f'max_version: {max_version}')\n\n# filter all versions by max_version\nfiltered_version_list = [[Decimal(v)] for v in all_version_list if int(v) >= max_version]\nfiltered_version_list.sort()\n\n# add target_table_exists flag\n# for the first iteration, use the value of the target_table_exists job var\n# for further iterations, hard code target_table_exists to 1\nmetadata_versions = []\nfor counter, version in enumerate(filtered_version_list):\n    metadata_versions.append([\n        version[0],\n        target_table_exists if counter == 0 else Decimal('1') \n    ])\n\nprint(f'metadata_versions: {metadata_versions}')\ncontext.updateGridVariable('metadata_versions', metadata_versions)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"81728":{"id":81728,"sourceID":81718,"targetID":81729},"81730":{"id":81730,"sourceID":81720,"targetID":81722},"81731":{"id":81731,"sourceID":81729,"targetID":81726},"81733":{"id":81733,"sourceID":81724,"targetID":81726}},"failureConnectors":{"81736":{"id":81736,"sourceID":81718,"targetID":81723},"81739":{"id":81739,"sourceID":81720,"targetID":81725}},"unconditionalConnectors":{"81734":{"id":81734,"sourceID":81726,"targetID":81727},"81737":{"id":81737,"sourceID":81721,"targetID":81720}},"trueConnectors":{"81732":{"id":81732,"sourceID":81722,"targetID":81724}},"falseConnectors":{"81735":{"id":81735,"sourceID":81722,"targetID":81718}},"iterationConnectors":{},"noteConnectors":{},"notes":{"81719":{"id":81719,"x":-395,"y":-156,"width":790,"height":312,"text":"**Get list of metadata versions for source table**\n\nQuery cloud storage to get a list of metadata versions for the source table, filtered by the __max_version__value from the target table.\n\nReturn an ordered list of versions.","colour":"e6e63c"}},"variables":{"azure_key_vault_url":{"definition":{"name":"azure_key_vault_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"cloud_storage_url":{"definition":{"name":"cloud_storage_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"host_path":{"definition":{"name":"host_path","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"max_version":{"definition":{"name":"max_version","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"protocol":{"definition":{"name":"protocol","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"source_database":{"definition":{"name":"source_database","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"source_schema":{"definition":{"name":"source_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"source_table":{"definition":{"name":"source_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"storage_account_key_secret":{"definition":{"name":"storage_account_key_secret","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_table_exists":{"definition":{"name":"target_table_exists","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{"metadata_versions":{"definition":{"name":"metadata_versions","scope":"TASKBATCH","definitions":[{"name":"source_version","type":"DECIMAL"},{"name":"target_table_exists","type":"DECIMAL"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"Sync Single Table - 1-1 - Get source metadata versions","description":"Unpacked from Shared Job [Sync Single Table].","type":"ORCHESTRATION","tag":"e909d31a-3cc9-4d3d-a065-bcc36c4fbdd4"}}