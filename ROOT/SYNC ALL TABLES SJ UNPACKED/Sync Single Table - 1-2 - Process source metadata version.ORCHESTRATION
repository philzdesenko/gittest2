{"job":{"components":{"81744":{"id":81744,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":2480,"y":240,"width":32,"height":32,"inputConnectorIDs":[81754],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success - All new data processed"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81746":{"id":81746,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":2320,"y":400,"width":32,"height":32,"inputConnectorIDs":[81770],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Error processing new data"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81747":{"id":81747,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":475,"y":395,"width":32,"height":32,"inputConnectorIDs":[81773],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Unable to parse metadata"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81748":{"id":81748,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":315,"y":235,"width":32,"height":32,"inputConnectorIDs":[81768],"outputSuccessConnectorIDs":[81763],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"avro_schema","mapTo":"avro_schema"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get Avro schema"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sync Single Table - 1-2-1 - Get Avro schema"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_database"},"2":{"slot":2,"type":"STRING","value":"${target_database}"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"target_schema"},"2":{"slot":2,"type":"STRING","value":"${target_schema}"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"stage_table"},"2":{"slot":2,"type":"STRING","value":"${stage_table}"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"source_database"},"2":{"slot":2,"type":"STRING","value":"${source_database}"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"source_schema"},"2":{"slot":2,"type":"STRING","value":"${source_schema}"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"source_table"},"2":{"slot":2,"type":"STRING","value":"${source_table}"}}},"7":{"slot":7,"values":{"1":{"slot":1,"type":"STRING","value":"source_version"},"2":{"slot":2,"type":"STRING","value":"${source_version}"}}}},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81749":{"id":81749,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":475,"y":235,"width":32,"height":32,"inputConnectorIDs":[81763],"outputSuccessConnectorIDs":[81759],"outputFailureConnectorIDs":[81773],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Extract nested_metadata from Avro schema"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import json\nfrom typing import List\nfrom pprint import pprint\n\n\nclass DataType:\n    \"\"\"\n    Class to hold simple data type and return the details in various string formats\n    \"\"\"\n    def __init__(self, name: str):\n        # mapping where Avro data type name does not match Snowflake\n        self.snowflake_type_map = {\n            'float': 'FLOAT',\n            'double': 'FLOAT',\n            'boolean': 'BOOLEAN',\n            'bytes': 'BINARY',\n            'io.debezium.data.VariableScaleDecimal': 'VARIANT',\n        }\n        # mapping where Snowflake data type name does not match Matillion ETL UI\n        self.metl_type_map = {\n            'BINARY': 'VARIANT',\n        }\n        # convert data type name from Avro to Snowflake\n        self.name = self.snowflake_type_map.get(name, name)\n  \n    def __repr__(self):\n        return f'DataType(name={self.name})'\n    \n    def metadata_grid(self) -> list:\n        \"\"\"\n        Return the data type as a list, used to populate nested_metadata grid variable\n        Format of list is [metl_type, metl_precision, metl_scale, snowflake_type]\n        \"\"\"\n        return [\n            self.metl_type_map.get(self.name, self.name.upper()),\n            '0',\n            '0',\n            self.metl_type_map.get(self.name, self.name.upper()),\n        ]\n\n\nclass Field:\n    \"\"\"\n    Class to hold field name and data type\n    \"\"\"\n    def __init__(self, name: str, data_type: DataType):\n        self.name = name\n        self.data_type = data_type\n        \n    def __repr__(self):\n        return f'Field(name={self.name}, data_type={self.data_type})'\n\n\nclass ArrayDataType(DataType):\n    \"\"\"\n    Class to hold array data type and return the details in various string formats\n    \"\"\"\n    def __init__(self, element_type: DataType):\n        super().__init__(name = 'ARRAY')\n        self.element_type = element_type\n        \n    def __repr__(self):\n        return f'ArrayDataType(name={self.name}, element_type={self.element_type})'\n    \n    def metadata_grid(self) -> list:\n        \"\"\"\n        Return the data type as a list, used to populate nested_metadata grid variable\n        Format of list is [metl_type, metl_precision, metl_scale, snowflake_type]\n        \"\"\"\n        return [\n            'VARIANT',\n            '0',\n            '0',\n            'VARIANT',\n        ]\n        \n\nclass VarcharDataType(DataType):\n    \"\"\"\n    Class to hold varchar data type and return the details in various string formats\n    \"\"\"\n    def __init__(self, size: int = 16777216):\n        super().__init__(name = 'VARCHAR')\n        self.size = size\n        \n    def __repr__(self):\n        return f'VarcharDataType (name={self.name}, size={self.size})'\n    \n    def metadata_grid(self) -> list:\n        \"\"\"\n        Return the data type as a list, used to populate nested_metadata grid variable\n        Format of list is [metl_type, metl_precision, metl_scale, snowflake_type]\n        \"\"\"\n        return [\n            self.name,\n            str(self.size),\n            '0',\n            f'{self.name}({self.size})'\n        ]\n\n\nclass NumberDataType(DataType):\n    \"\"\"\n    Class to hold decimal data type and return the details in various string formats\n    \"\"\"\n    def __init__(self, precision: int, scale: int):\n        super().__init__(name = 'NUMBER')\n        self.precision = precision\n        self.scale = scale\n        \n    def __repr__(self):\n        return f'NumberDataType (name={self.name}, precision={self.precision}, scale={self.scale})'\n    \n    def metadata_grid(self) -> list:\n        \"\"\"\n        Return the data type as a list, used to populate nested_metadata grid variable\n        Format of list is [metl_type, metl_precision, metl_scale, snowflake_type]\n        \"\"\"\n        if self.precision <= 38:\n            return [\n                self.name,\n                str(self.precision),\n                str(self.scale),\n                f'{self.name}({self.precision}, {self.scale})'\n            ]\n        else:\n            return [\n                'VARIANT',\n                '0',\n                '0',\n                'VARIANT',\n            ]\n\n\nclass StructDataType(DataType):\n    \"\"\"\n    Class to hold struct data type and return the details in various string formats\n    \"\"\"\n    def __init__(self, field_list: List[Field]):\n        super().__init__(name = 'STRUCT')\n        self.field_list = field_list\n        \n    def __repr__(self):\n        return f'StructDataType(name={self.name}, field_list={self.field_list})'\n    \n    def metadata_grid(self) -> list:\n        \"\"\"\n        Return the data type as a list, used to populate nested_metadata grid variable\n        Format of list is [metl_type, metl_precision, metl_scale, snowflake_type]\n        \"\"\"\n        return [\n            'VARIANT',\n            '0',\n            '0',\n            'VARIANT',\n        ]\n\n\ndef get_fields(record: dict) -> List[Field]:\n    \"\"\"\n    Extract list of Field objects from an Avro schema record\n    \"\"\"\n    if record.get('type', '') != 'record':\n        raise ValueError('Avro schema not in expected format')\n    \n    field_list = []\n    \n    for field in record.get('fields', []):\n        field_list.append(\n            Field(\n                name = field.get('name', ''),\n                data_type = get_data_type(field.get('type', ''))\n            )\n        )\n\n    return field_list\n\n\ndef get_data_type(type_object) -> DataType:\n    \"\"\"\n    Convert Avro type object into DataType object\n    \"\"\"\n    # discard any nullable wrapper on type_object\n    type_object = extract_from_nullable(type_object)\n\n    # if type_object is a string, it is a simple data type\n    if isinstance(type_object, str):\n        \n        if type_object.lower() in ('tinyint', 'short', 'smallint', 'int', 'integer', 'long', 'bigint'):\n            return NumberDataType(precision=38, scale=0)\n        \n        elif type_object.lower() in ('string'):\n            return VarcharDataType()\n          \n        else:\n            return DataType(name=type_object)\n    \n    # complex data types are stored as dictionaries\n    elif isinstance(type_object, dict):\n        return get_complex_type(type_object)\n    \n    # unexpected type, just return input as string\n    else:\n        return DataType(name=str(type_object))\n    \n    \ndef extract_from_nullable(type_object):\n    \"\"\"\n    Nullable types have format ['null', 'type'], extract the actual type\n    \"\"\"\n    if isinstance(type_object, list):\n        if len(type_object) == 2 and 'null' in type_object:\n            type_object.remove('null')\n            type_object = type_object[0]\n            \n    return type_object\n\n\ndef get_complex_type(type_dict: dict) -> DataType:\n    \"\"\"\n    Return complex DataType stored as a dictionary in Avro schema\n    \"\"\"\n    type_dict_type = type_dict.get('type', '')\n    \n    # record types have format {\"type\": \"record\", ... \"fields\": []}\n    if type_dict_type == 'record':\n        return StructDataType(\n            field_list = get_fields(type_dict)\n        )\n    \n    # array types have format {\"type\": array, \"items\": \"string\"}\n    elif type_dict_type == 'array':\n        return ArrayDataType(\n            element_type = get_data_type(type_dict.get('items', ''))\n        )\n    \n    # decimal types have format {\"type\": \"bytes\", \"scale\": 0, \"precision\": 38, \"logicalType\": \"decimal\"}\n    elif type_dict_type == 'bytes' and type_dict.get('logicalType', '') == 'decimal':\n        return NumberDataType(\n            precision = type_dict.get('precision', 10),\n            scale = type_dict.get('scale', 0),\n        )\n\n    # kafka connect date types have format {\"type\": \"int\", \"logicalType\": \"date\"}\n    elif type_dict_type == 'int' and type_dict.get('logicalType', '') == 'date':\n        return NumberDataType(precision=38, scale=0)\n      \n    # kafka connect time-millis types have format {\"type\": \"int\", \"logicalType\": \"time-millis\"}\n    elif type_dict_type == 'int' and type_dict.get('logicalType', '') == 'time-millis':\n        return NumberDataType(precision=38, scale=0)\n      \n    # kafka connect timestamp-millis types have format {\"type\": \"long\", \"logicalType\": \"timestamp-millis\"}\n    elif type_dict_type == 'long' and type_dict.get('logicalType', '') == 'timestamp-millis':\n        return NumberDataType(precision=38, scale=0)\n    \n    # return as VARIANT if no matches\n    else:\n        return DataType(name='VARIANT')\n\n\ndef update_var(name: str, var: str) -> None:\n    \"\"\"\n    Update a job or grid variable back into the job context\n    \"\"\"\n    if isinstance(var, list):\n        print(f'{name}:')\n        for x in var:\n          print(\"\\t\".join(map(str,x)))\n        context.updateGridVariable(name, var)\n    else:\n        print(f'{name}: {var}')\n        context.updateVariable(name, var)\n    print()\n\n\n# convert Avro schema as json string to dictionary\nschema_dict = json.loads(avro_schema)\n\n# convert dictionary to list of Field objects\nfield_list = get_fields(schema_dict)\n\n# format the child fields in the `before` or `after` Field object\nnested_metadata = []\nfor field in field_list:\n    if field.name in ('before', 'after'):\n        # if either `before` or `after` contain a struct, then they should have the schema we're after.\n        # usually `after` contains the namespace of the `before` field, rather than a struct\n        # also skip if we have already set nested_metadata\n        if (not isinstance(field.data_type, StructDataType) or nested_metadata):\n            continue\n        \n        print(f'Reading payload metadata from {field.name!r} field')\n        print()\n        \n        # format as list of lists to set nested_metadata grid var\n        nested_metadata = [\n            [\n                'PAYLOAD',\n                field.name,\n                field.name.upper(),\n                *field.data_type.metadata_grid(),  # unpack list of [type, data_type, precision, scale]\n                '',    # default_value\n                'No',  # not_null\n                'No',  # unique\n            ] for field in field.data_type.field_list\n        ]\n\nupdate_var('nested_metadata', nested_metadata)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81750":{"id":81750,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-80,"y":240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[81768],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81751":{"id":81751,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":2320,"y":240,"width":32,"height":32,"inputConnectorIDs":[81769],"outputSuccessConnectorIDs":[81754],"outputFailureConnectorIDs":[81770],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Transform and Load"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sync Single Table - 1-2-4 - Transform and Load"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"append_metadata"},"2":{"slot":2,"type":"STRING","value":"${append_metadata}"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_name"},"2":{"slot":2,"type":"STRING","value":"${commit_id_name}"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"connector"},"2":{"slot":2,"type":"STRING","value":"${connector}"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_datatype"},"2":{"slot":2,"type":"STRING","value":"${commit_id_datatype}"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_precision"},"2":{"slot":2,"type":"STRING","value":"${commit_id_precision}"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_scale"},"2":{"slot":2,"type":"STRING","value":"${commit_id_scale}"}}},"7":{"slot":7,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_database_type"},"2":{"slot":2,"type":"STRING","value":"${commit_id_database_type}"}}},"8":{"slot":8,"values":{"1":{"slot":1,"type":"STRING","value":"stage_table"},"2":{"slot":2,"type":"STRING","value":"${stage_table}"}}},"9":{"slot":9,"values":{"1":{"slot":1,"type":"STRING","value":"join_expression"},"2":{"slot":2,"type":"STRING","value":"${join_expression}"}}},"10":{"slot":10,"values":{"1":{"slot":1,"type":"STRING","value":"max_date_hour"},"2":{"slot":2,"type":"STRING","value":"${max_date_hour}"}}},"11":{"slot":11,"values":{"1":{"slot":1,"type":"STRING","value":"high_water_mark"},"2":{"slot":2,"type":"STRING","value":"${high_water_mark}"}}},"12":{"slot":12,"values":{"1":{"slot":1,"type":"STRING","value":"high_water_mark_target"},"2":{"slot":2,"type":"STRING","value":"${high_water_mark_target}"}}},"13":{"slot":13,"values":{"1":{"slot":1,"type":"STRING","value":"source_database"},"2":{"slot":2,"type":"STRING","value":"${source_database}"}}},"14":{"slot":14,"values":{"1":{"slot":1,"type":"STRING","value":"source_schema"},"2":{"slot":2,"type":"STRING","value":"${source_schema}"}}},"15":{"slot":15,"values":{"1":{"slot":1,"type":"STRING","value":"source_table"},"2":{"slot":2,"type":"STRING","value":"${source_table}"}}},"16":{"slot":16,"values":{"1":{"slot":1,"type":"STRING","value":"source_version"},"2":{"slot":2,"type":"STRING","value":"${source_version}"}}},"17":{"slot":17,"values":{"1":{"slot":1,"type":"STRING","value":"warehouse"},"2":{"slot":2,"type":"STRING","value":"${warehouse}"}}},"18":{"slot":18,"values":{"1":{"slot":1,"type":"STRING","value":"target_database"},"2":{"slot":2,"type":"STRING","value":"${target_database}"}}},"19":{"slot":19,"values":{"1":{"slot":1,"type":"STRING","value":"target_schema"},"2":{"slot":2,"type":"STRING","value":"${target_schema}"}}},"20":{"slot":20,"values":{"1":{"slot":1,"type":"STRING","value":"target_table"},"2":{"slot":2,"type":"STRING","value":"${target_table}"}}},"21":{"slot":21,"values":{"1":{"slot":1,"type":"STRING","value":"transformation_type"},"2":{"slot":2,"type":"STRING","value":"${transformation_type}"}}}},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{"1":{"slot":1,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"nested_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"property"},"3":{"slot":3,"type":"GRID","value":"alias"},"4":{"slot":4,"type":"GRID","value":"type"},"5":{"slot":5,"type":"GRID","value":"size"},"6":{"slot":6,"type":"GRID","value":"precision"},"7":{"slot":7,"type":"GRID","value":"database_type"},"8":{"slot":8,"type":"GRID","value":"default_value"},"9":{"slot":9,"type":"GRID","value":"not_null"},"10":{"slot":10,"type":"GRID","value":"unique"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"nested_metadata"},"2":{"slot":2,"type":"STRING","value":"grid"}}},"2":{"slot":2,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"primary_key"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"key_column"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"primary_key"},"2":{"slot":2,"type":"STRING","value":"grid"}}},"3":{"slot":3,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"target_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"type"},"3":{"slot":3,"type":"GRID","value":"size"},"4":{"slot":4,"type":"GRID","value":"precision"},"5":{"slot":5,"type":"GRID","value":"database_type"},"6":{"slot":6,"type":"GRID","value":"default_value"},"7":{"slot":7,"type":"GRID","value":"not_null"},"8":{"slot":8,"type":"GRID","value":"unique"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"target_metadata"},"2":{"slot":2,"type":"STRING","value":"grid"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81752":{"id":81752,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":1611478312,"x":1920,"y":320,"width":32,"height":32,"inputConnectorIDs":[81767],"outputSuccessConnectorIDs":[81757],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create target table"}}}},"visible":true},"2":{"slot":2,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_database}"}}}},"visible":true},"3":{"slot":3,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_schema}"}}}},"visible":true},"4":{"slot":4,"name":"New Table Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_table}"}}}},"visible":true},"5":{"slot":5,"name":"Columns","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"target_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"type"},"3":{"slot":3,"type":"GRID","value":"size"},"4":{"slot":4,"type":"GRID","value":"precision"},"5":{"slot":5,"type":"GRID","value":"default_value"},"6":{"slot":6,"type":"GRID","value":"not_null"},"7":{"slot":7,"type":"GRID","value":"unique"},"8":{"slot":8,"type":"GRID","value":null}}}},"visible":true},"6":{"slot":6,"name":"Create/Replace","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create"}}}},"visible":true},"7":{"slot":7,"name":"Clustering Keys","elements":{},"visible":true},"8":{"slot":8,"name":"Data Retention Time in Days","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":""}}}},"visible":true},"9":{"slot":9,"name":"Comment","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"11":{"slot":11,"name":"Primary Keys","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"primary_key"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"key_column"}}}},"visible":true},"12":{"slot":12,"name":"Table Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Permanent"}}}},"visible":true},"13":{"slot":13,"name":"Default DDL Collation","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81753":{"id":81753,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":1600,"y":240,"width":32,"height":32,"inputConnectorIDs":[81766],"outputSuccessConnectorIDs":[81758],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"gridExportMappings":{"1":{"slot":1,"fromGrid":"target_metadata","toGrid":"target_metadata","columnMapToFrom":{"column_name":"column_name","database_type":"database_type","default_value":"default_value","not_null":"not_null","precision":"precision","size":"size","type":"type","unique":"unique"}}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build target table metadata from nested_metadata"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sync Single Table - 1-2-2 - Build new target table metadata"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_database"},"2":{"slot":2,"type":"STRING","value":"${target_database}"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"target_schema"},"2":{"slot":2,"type":"STRING","value":"${target_schema}"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"target_table"},"2":{"slot":2,"type":"STRING","value":"${target_table}"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"append_metadata"},"2":{"slot":2,"type":"STRING","value":"${append_metadata}"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"transformation_type"},"2":{"slot":2,"type":"STRING","value":"${transformation_type}"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_datatype"},"2":{"slot":2,"type":"STRING","value":"${commit_id_datatype}"}}},"7":{"slot":7,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_precision"},"2":{"slot":2,"type":"STRING","value":"${commit_id_precision}"}}},"8":{"slot":8,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_scale"},"2":{"slot":2,"type":"STRING","value":"${commit_id_scale}"}}},"9":{"slot":9,"values":{"1":{"slot":1,"type":"STRING","value":"commit_id_database_type"},"2":{"slot":2,"type":"STRING","value":"${commit_id_database_type}"}}}},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{"1":{"slot":1,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"nested_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"property"},"3":{"slot":3,"type":"GRID","value":"alias"},"4":{"slot":4,"type":"GRID","value":"type"},"5":{"slot":5,"type":"GRID","value":"size"},"6":{"slot":6,"type":"GRID","value":"precision"},"7":{"slot":7,"type":"GRID","value":"database_type"},"8":{"slot":8,"type":"GRID","value":"default_value"},"9":{"slot":9,"type":"GRID","value":"not_null"},"10":{"slot":10,"type":"GRID","value":"unique"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"nested_metadata"},"2":{"slot":2,"type":"STRING","value":"grid"}}},"3":{"slot":3,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"primary_key"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"key_column"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"primary_key"},"2":{"slot":2,"type":"STRING","value":"grid"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81792":{"id":81792,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":1195,"y":475,"width":32,"height":32,"inputConnectorIDs":[81771],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - No primary key detected"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81793":{"id":81793,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":1155583855,"x":1035,"y":315,"width":32,"height":32,"inputConnectorIDs":[81756],"outputSuccessConnectorIDs":[81761],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read primary key from latest metadata in stage table"}}}},"visible":true},"2":{"slot":2,"name":"Basic/Advanced","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"3":{"slot":3,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"4":{"slot":4,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"6":{"slot":6,"name":"Table Columns","elements":{},"visible":false},"7":{"slot":7,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${get_primary_key_sql}"}}}},"visible":true},"8":{"slot":8,"name":"Grid Variable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"primary_key"}}}},"visible":true},"9":{"slot":9,"name":"Grid Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"KEY_COLUMN"}}}},"visible":true},"10":{"slot":10,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"100"}}}},"visible":false},"11":{"slot":11,"name":"Order By","elements":{},"visible":false},"12":{"slot":12,"name":"Sort","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Ascending"}}}},"visible":false},"13":{"slot":13,"name":"Filter Conditions","elements":{},"visible":false},"14":{"slot":14,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AND"}}}},"visible":false},"20":{"slot":20,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81794":{"id":81794,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":715,"y":235,"width":32,"height":32,"inputConnectorIDs":[81759],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[81765],"outputFalseConnectorIDs":[81764],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Transformation is Change Log?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"transformation_type"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"change log"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81795":{"id":81795,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":1195,"y":315,"width":32,"height":32,"inputConnectorIDs":[81761],"outputSuccessConnectorIDs":[81760],"outputFailureConnectorIDs":[81771],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build join expression"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"from pprint import pprint\n\nprimary_key = context.getGridVariable('primary_key')\n\nif not primary_key:\n    err_msg = (f'Primary key required for {transformation_type!r} transformation type, but no primary '\n              f'key detected in change data.\\n'\n              f'Please add a primary key to the source table and recreate the CDC pipeline, '\n              f'or try a \\'Change Log\\' transformation type.'\n    )\n    raise Exception(err_msg)\n\nprint('primary_key:')\npprint(primary_key, width=150)\nprint()\n\n# build join expression\npredicates = [f'\"SOURCE\".\"{col[0]}\" = \"TARGET\".\"{col[0]}\"' for col in primary_key]\n\njoin_expression = \" AND \".join(predicates)\n\nprint(f'join_expression: {join_expression}')\ncontext.updateVariable('join_expression', join_expression)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81796":{"id":81796,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":1760,"y":240,"width":32,"height":32,"inputConnectorIDs":[81758],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[81762],"outputFalseConnectorIDs":[81767],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table exists?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_exists"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81797":{"id":81797,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":875,"y":315,"width":32,"height":32,"inputConnectorIDs":[81764],"outputSuccessConnectorIDs":[81756],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build get_primary_key_sql"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"# do not filter on the high_water_mark here\n# 1. when there is no new data, this is very expensive as have to scan all files under max_date_hour\n# 2. when there is new data, all change events should have the same primary key\nget_primary_key_sql = \\\nf'''WITH \n\"METADATA_KEYS\" AS (\n    SELECT \n        \"VALUE\":\"metadata\".\"key\" AS \"KEYS\"\n    FROM\n        \"{target_database}\".\"{target_schema}\".\"{stage_table}\"\n    WHERE \n        \"DATABASE\" = '{source_database}' \n        AND \"SCHEMA\" = '{source_schema}' \n        AND \"TABLE\" = '{source_table}'\n        AND \"VERSION\" = {source_version}\n        AND \"DATE_HOUR\" >= '{max_date_hour}'\n    LIMIT 1\n)\nSELECT\n    UPPER(\"KEY_LIST\".\"VALUE\"::VARCHAR) as \"KEY_COLUMN\"\nFROM \"METADATA_KEYS\",\nLATERAL FLATTEN (input => \"METADATA_KEYS\".\"KEYS\", recursive => FALSE) \"KEY_LIST\"'''\n\nprint(f'get_primary_key_sql: \\n{get_primary_key_sql}')\ncontext.updateVariable('get_primary_key_sql', get_primary_key_sql)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81798":{"id":81798,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":1920,"y":240,"width":32,"height":32,"inputConnectorIDs":[81762],"outputSuccessConnectorIDs":[81755],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Resolve metadata drift"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sync Single Table - 1-2-3 - Resolve metadata drift"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_database"},"2":{"slot":2,"type":"STRING","value":"${target_database}"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"target_schema"},"2":{"slot":2,"type":"STRING","value":"${target_schema}"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"target_table"},"2":{"slot":2,"type":"STRING","value":"${target_table}"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"schema_drift_action"},"2":{"slot":2,"type":"STRING","value":"${schema_drift_action}"}}}},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{"1":{"slot":1,"elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"target_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"type"},"3":{"slot":3,"type":"GRID","value":"size"},"4":{"slot":4,"type":"GRID","value":"precision"},"5":{"slot":5,"type":"GRID","value":"database_type"},"6":{"slot":6,"type":"GRID","value":"default_value"},"7":{"slot":7,"type":"GRID","value":"not_null"},"8":{"slot":8,"type":"GRID","value":"unique"}}}},"values":{"1":{"slot":1,"type":"STRING","value":"latest_target_metadata"},"2":{"slot":2,"type":"STRING","value":"grid"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81799":{"id":81799,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1355,"y":235,"width":32,"height":32,"inputConnectorIDs":[81760,81765],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[81766],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Join paths"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"81800":{"id":81800,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":2080,"y":240,"width":32,"height":32,"inputConnectorIDs":[81755,81757],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[81769],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Join paths (2)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"81754":{"id":81754,"sourceID":81751,"targetID":81744},"81755":{"id":81755,"sourceID":81798,"targetID":81800},"81756":{"id":81756,"sourceID":81797,"targetID":81793},"81757":{"id":81757,"sourceID":81752,"targetID":81800},"81758":{"id":81758,"sourceID":81753,"targetID":81796},"81759":{"id":81759,"sourceID":81749,"targetID":81794},"81760":{"id":81760,"sourceID":81795,"targetID":81799},"81761":{"id":81761,"sourceID":81793,"targetID":81795},"81763":{"id":81763,"sourceID":81748,"targetID":81749}},"failureConnectors":{"81770":{"id":81770,"sourceID":81751,"targetID":81746},"81771":{"id":81771,"sourceID":81795,"targetID":81792},"81773":{"id":81773,"sourceID":81749,"targetID":81747}},"unconditionalConnectors":{"81766":{"id":81766,"sourceID":81799,"targetID":81753},"81768":{"id":81768,"sourceID":81750,"targetID":81748},"81769":{"id":81769,"sourceID":81800,"targetID":81751}},"trueConnectors":{"81762":{"id":81762,"sourceID":81796,"targetID":81798},"81765":{"id":81765,"sourceID":81794,"targetID":81799}},"falseConnectors":{"81764":{"id":81764,"sourceID":81794,"targetID":81797},"81767":{"id":81767,"sourceID":81796,"targetID":81752}},"iterationConnectors":{},"noteConnectors":{},"notes":{"81740":{"id":81740,"x":646,"y":5,"width":791,"height":389,"text":"**Read primary key**\n\nNote: the primary key and join expression are not required for a change log.  In particular, we do not want to add a primary key to the target table for a change log as we will have multiple events for each key.\n\nRead the primary key from data in the latest __date_hour__, and store in __primary_key__ grid variable.\n\nUse the __primary_key__ grid variable to build the Join Expression for the Table Update components in the Transformation job.\n\nThe join expression is required to merge changes into the target table.  So If no primary key is detected, raise an error and stop the job.","colour":"e6e63c"},"81741":{"id":81741,"x":5,"y":86,"width":152,"height":230,"text":"**Check for truncate operations**\n\nTo be implemented...\n","colour":"e6e63c"},"81742":{"id":81742,"x":2245,"y":84,"width":150,"height":230,"text":"**Transform and load new data from stage table into target table**","colour":"e6e63c"},"81743":{"id":81743,"x":247,"y":6,"width":309,"height":308,"text":"**Parse Avro schema**\n\nParse the __avro_schema__ to extract\n\n* __nested_metadata__grid var, used to create target table and check for schema drift\n","colour":"e6e63c"},"81745":{"id":81745,"x":1526,"y":84,"width":628,"height":311,"text":"**Prepare target table**\n\nBuild __target_metadata__ from the Avro schema for the current version\n\nIf the target table exists, check for schema drift\n\nElse create the target table using __target_metadata__\n","colour":"e6e63c"}},"variables":{"append_metadata":{"definition":{"name":"append_metadata","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"avro_schema":{"definition":{"name":"avro_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"azure_key_vault_url":{"definition":{"name":"azure_key_vault_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"cloud_storage_url":{"definition":{"name":"cloud_storage_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"commit_id_database_type":{"definition":{"name":"commit_id_database_type","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"commit_id_datatype":{"definition":{"name":"commit_id_datatype","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"commit_id_name":{"definition":{"name":"commit_id_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"commit_id_precision":{"definition":{"name":"commit_id_precision","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"commit_id_scale":{"definition":{"name":"commit_id_scale","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"connector":{"definition":{"name":"connector","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"get_primary_key_sql":{"definition":{"name":"get_primary_key_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"high_water_mark":{"definition":{"name":"high_water_mark","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"high_water_mark_target":{"definition":{"name":"high_water_mark_target","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"join_expression":{"definition":{"name":"join_expression","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"max_date_hour":{"definition":{"name":"max_date_hour","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"max_version":{"definition":{"name":"max_version","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"sample_filename":{"definition":{"name":"sample_filename","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"schema_drift_action":{"definition":{"name":"schema_drift_action","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_database":{"definition":{"name":"source_database","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_schema":{"definition":{"name":"source_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_table":{"definition":{"name":"source_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_version":{"definition":{"name":"source_version","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"stage_table":{"definition":{"name":"stage_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"storage_account_key_secret":{"definition":{"name":"storage_account_key_secret","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_database":{"definition":{"name":"target_database","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_schema":{"definition":{"name":"target_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_table":{"definition":{"name":"target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_table_exists":{"definition":{"name":"target_table_exists","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"transformation_type":{"definition":{"name":"transformation_type","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"warehouse":{"definition":{"name":"warehouse","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{"nested_metadata":{"definition":{"name":"nested_metadata","scope":"TASKBATCH","definitions":[{"name":"column_name","type":"TEXT"},{"name":"property","type":"TEXT"},{"name":"alias","type":"TEXT"},{"name":"type","type":"TEXT"},{"name":"size","type":"DECIMAL"},{"name":"precision","type":"DECIMAL"},{"name":"database_type","type":"TEXT"},{"name":"default_value","type":"TEXT"},{"name":"not_null","type":"TEXT"},{"name":"unique","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]},"primary_key":{"definition":{"name":"primary_key","scope":"TASKBATCH","definitions":[{"name":"key_column","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]},"target_metadata":{"definition":{"name":"target_metadata","scope":"TASKBATCH","definitions":[{"name":"column_name","type":"TEXT"},{"name":"type","type":"TEXT"},{"name":"size","type":"DECIMAL"},{"name":"precision","type":"DECIMAL"},{"name":"database_type","type":"TEXT"},{"name":"default_value","type":"TEXT"},{"name":"not_null","type":"TEXT"},{"name":"unique","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]}}},"info":{"name":"Sync Single Table - 1-2 - Process source metadata version","description":"Unpacked from Shared Job [Sync Single Table].","type":"ORCHESTRATION","tag":"91394a40-547f-44eb-a43e-0bd2ac11efa9"}}