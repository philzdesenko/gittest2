{"job":{"components":{"1229424":{"id":1229424,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":394,"y":395,"width":32,"height":32,"inputConnectorIDs":[1229417],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Azure Blob Storage parameters not set"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229425":{"id":1229425,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":74,"y":395,"width":32,"height":32,"inputConnectorIDs":[1229416],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure - Storage protocol not supported"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229428":{"id":1229428,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":74,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229419],"outputSuccessConnectorIDs":[1229411],"outputFailureConnectorIDs":[1229416],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Identify storage protocol"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if not cloud_storage_url[-1:] == '/':\n    cloud_storage_url = cloud_storage_url + '/'\n    \nprint(f'cloud_storage_url: {cloud_storage_url!r}')\nprint()\n\n# split the cloud_storage_url into protocol and host_path\nurl_list = cloud_storage_url.split('://', 1)\n\n# check we could split the string and extract a protocol\nif len(url_list) == 1:\n    err_msg = f'Unable to determine the protocol from the cloud_storage_url {cloud_storage_url!r}'\n    raise Exception(err_msg)\n\n# unpack the list\nprotocol, host_path = url_list\nprotocol = protocol.lower()\n\n# check protocol is supported\nsupported_protocols = ('azure', 's3')\nif protocol not in supported_protocols:\n    err_msg = f'The protocol {protocol!r} was identifed from the cloud_storage_url {cloud_storage_url!r}, but the only supported protocols are {\", \".join(supported_protocols)}'\n    raise Exception(err_msg)\n\nprint(f'protocol: {protocol!r}')\ncontext.updateVariable('protocol', protocol)\n\nprint(f'host_path: {host_path!r}')\ncontext.updateVariable('host_path', host_path)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229429":{"id":1229429,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1034,"y":395,"width":32,"height":32,"inputConnectorIDs":[1229412],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success - No files in cloud storage"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229430":{"id":1229430,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":394,"y":235,"width":32,"height":32,"inputConnectorIDs":[1229413],"outputSuccessConnectorIDs":[1229410],"outputFailureConnectorIDs":[1229417],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Validate Azure parameters"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"print(f'azure_key_vault_url: {azure_key_vault_url!r}')\nprint(f'storage_account_key_secret: {storage_account_key_secret!r}')\n\nmissing_parameters = []\n\nif not azure_key_vault_url:\n    missing_parameters.append('Azure Key Vault URL')\n    \nif not storage_account_key_secret:\n    missing_parameters.append('Azure Blob Storage Account Key Secret')\n    \nif missing_parameters:\n    err_msg = ('The following shared job parameters were not set, but are '\n               f'required for Azure Blob Storage: {missing_parameters}')\n    raise Exception(err_msg)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229431":{"id":1229431,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":874,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229418],"outputSuccessConnectorIDs":[1229408],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check number of source tables"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"# get the number of items in the source_tables grid var\nsource_tables = context.getGridVariable('source_tables') or []\nnum_source_tables = len(source_tables)\n\nprint(f'num_source_tables: {num_source_tables!r}')\ncontext.updateVariable('num_source_tables', num_source_tables)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229432":{"id":1229432,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":1034,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229408],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[1229414],"outputFalseConnectorIDs":[1229412],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Source tables found in cloud storage?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"num_source_tables"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229433":{"id":1229433,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-80,"y":160,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[1229419],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229434":{"id":1229434,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":234,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229411],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[1229415],"outputFalseConnectorIDs":[1229413],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Protocol is s3?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"protocol"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"s3"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229435":{"id":1229435,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":554,"y":235,"width":32,"height":32,"inputConnectorIDs":[1229410],"outputSuccessConnectorIDs":[1229409],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get list of tables from Azure"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"try:\n    from azure.identity import ManagedIdentityCredential\n    from azure.keyvault.secrets import SecretClient\n    from azure.storage.blob import BlobServiceClient\nexcept ModuleNotFoundError as e:\n    err_msg = ('Module not found. The following Python3 packages are '\n               'required: [azure-identity, azure-keyvault-secrets, azure-storage-blob]'\n               f'\\nException: {e!r}')\n    raise ModuleNotFoundError(err_msg)\n    \nfrom collections import namedtuple\nfrom pprint import pprint \n\n\n# create a named tuple so that we can use sets to get distinct list of tables\nTableReference = namedtuple('TableReference', 'database schema table')\n\n\ndef get_distinct_tables(blobs, prefix):\n    \"\"\"\n    Extract a list of distinct ['database', 'schema', 'table'] from a list of blobs\n    \"\"\"\n    all_table_refs = []\n    for blob in blobs:\n        \n        # get blob name without 'prefix'\n        blob_name = blob.name[len(prefix):]\n        \n        # try to split blob_name into ['database=<database>', 'schema=<schema>', 'table=<table>', '....']\n        blob_path_list = blob_name.split('/', 3)\n        if len(blob_path_list) == 4:\n            table_list = [key_value.split('=', 1)[1] for key_value in blob_path_list[:-1]]\n            all_table_refs.append(\n                TableReference(*table_list)\n            )\n        \n    distinct_table_refs = set(all_table_refs)\n    \n    # convert named tuples to lists before returning\n    return [list(t) for t in distinct_table_refs]\n    \n\n# split host_path into account, container and prefix\naccount, container, prefix = host_path.split('/', 2)\nprint(f'account: {account!r}')\nprint(f'container: {container!r}')\nprint(f'prefix: {prefix!r}')\nprint()\n\n# lookup storage account key from Azure Key Vault\nprint(f'Attempting to read the storage account key from the secret {storage_account_key_secret!r} in the Key Vault {azure_key_vault_url!r}')\ncredential = ManagedIdentityCredential()\nkey_vault_client = SecretClient(vault_url=azure_key_vault_url, credential=credential)\nkey_vault_secret = key_vault_client.get_secret(storage_account_key_secret)\n\naccount_key = key_vault_secret.value\nprint('Successfully read storage account key')\nprint()\n\n# get list of blobs in container which start with prefix\nblob_service_client = BlobServiceClient(\n    account_url=f'https://{account}',\n    credential=account_key\n)\ncontainer_client = blob_service_client.get_container_client(container)\nblobs = container_client.list_blobs(name_starts_with=prefix)\n\n# get distinct list of source tables from blob names\nsource_tables = get_distinct_tables(blobs, prefix)\n\nprint('source_tables:')\npprint(source_tables)\ncontext.updateGridVariable('source_tables', source_tables)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229436":{"id":1229436,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":714,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229409,1229437],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[1229418],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Join paths"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229438":{"id":1229438,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":554,"y":155,"width":32,"height":32,"inputConnectorIDs":[1229415],"outputSuccessConnectorIDs":[1229437],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get list of tables from S3"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\nfrom pprint import pprint\n\n\ndef get_common_prefixes(client, bucket, prefix, continuation_token=None):\n    \"\"\"\n    Wrapper for list_objects_v2 which returns all items when more than 1000\n    \n    Returns a list of dicts like [{'Prefix': 'niagara-shared-job-test/stage/postgres/'}]\n    \"\"\"\n    if continuation_token:\n        response = client.list_objects_v2(\n            Bucket=bucket, \n            Prefix=prefix, \n            Delimiter='/',\n            ContinuationToken=continuation_token,\n        )\n    else:\n        response = client.list_objects_v2(\n            Bucket=bucket, \n            Prefix=prefix, \n            Delimiter='/',\n        )\n        \n    common_prefixes = response.get('CommonPrefixes', list())\n    \n    if response.get('IsTruncated'):\n        continuation_token = response.get('NextContinuationToken')\n        common_prefixes.extend(\n            get_common_prefixes(client, bucket, prefix, continuation_token)\n        )\n        \n    return common_prefixes\n\n\ndef get_sub_paths(client, bucket, prefix):\n    \"\"\"\n    Extract list of paths from common_prefixes list\n    \"\"\"\n    common_prefixes = get_common_prefixes(client, bucket, prefix)\n    sub_paths = [c.get('Prefix') for c in common_prefixes]\n    return sub_paths\n\n\ndef split_bucket_prefix(s):\n    \"\"\"\n    Take base_path and return list of [bucket, path]\n    \"\"\"\n    path_list = s.split('/', 1)\n    if len(path_list) == 1:\n        return path_list.append('')\n    else:\n        return path_list\n\n\ndef split_path(s, prefix):\n    \"\"\"\n    Split path into list of [<database>, <schema>, <table>]\n    \n    Input path has format '<prefix>database=<database>/schema=<schema>/table=<table>/'\n    \"\"\"\n    key_value_list = s[len(prefix):-1].split('/')\n    return [key_value.split('=', 1)[1] for key_value in key_value_list]\n\n\nclient = boto3.client('s3')\n\n# split stage_base into bucket and prefix\nbucket, prefix = split_bucket_prefix(host_path)\nprint(f'bucket: {bucket!r}')\nprint(f'prefix: {prefix!r}')\n\n# get a list of paths of form '<prefix>/<database>/<schema>/<table>'\nsource_table_paths = []\ndatabase_paths = get_sub_paths(client, bucket, prefix)\nfor database in database_paths:\n    schema_paths = get_sub_paths(client, bucket, database)\n    for schema in schema_paths:\n        source_table_paths.extend(get_sub_paths(client, bucket, schema))\n\n# convert to list of lists before storing as grid var, of form '[<database>, <schema>, <table>]'\nsource_tables = [\n    split_path(path, prefix) for path in source_table_paths\n]\n\nprint('source_tables:')\npprint(source_tables)\ncontext.updateGridVariable('source_tables', source_tables)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1229439":{"id":1229439,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1200,"y":160,"width":32,"height":32,"inputConnectorIDs":[1229414],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"1229408":{"id":1229408,"sourceID":1229431,"targetID":1229432},"1229409":{"id":1229409,"sourceID":1229435,"targetID":1229436},"1229410":{"id":1229410,"sourceID":1229430,"targetID":1229435},"1229411":{"id":1229411,"sourceID":1229428,"targetID":1229434},"1229437":{"id":1229437,"sourceID":1229438,"targetID":1229436}},"failureConnectors":{"1229416":{"id":1229416,"sourceID":1229428,"targetID":1229425},"1229417":{"id":1229417,"sourceID":1229430,"targetID":1229424}},"unconditionalConnectors":{"1229418":{"id":1229418,"sourceID":1229436,"targetID":1229431},"1229419":{"id":1229419,"sourceID":1229433,"targetID":1229428}},"trueConnectors":{"1229414":{"id":1229414,"sourceID":1229432,"targetID":1229439},"1229415":{"id":1229415,"sourceID":1229434,"targetID":1229438}},"falseConnectors":{"1229412":{"id":1229412,"sourceID":1229432,"targetID":1229429},"1229413":{"id":1229413,"sourceID":1229434,"targetID":1229430}},"iterationConnectors":{},"noteConnectors":{},"notes":{"1229427":{"id":1229427,"x":6,"y":6,"width":1109,"height":309,"text":"**Get list of source tables**\n\nQuery cloud storage to get a list of paths containing CDC files","colour":"e6e63c"}},"variables":{"azure_key_vault_url":{"definition":{"name":"azure_key_vault_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"cloud_storage_url":{"definition":{"name":"cloud_storage_url","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"host_path":{"definition":{"name":"host_path","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"num_source_tables":{"definition":{"name":"num_source_tables","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"0"},"protocol":{"definition":{"name":"protocol","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"storage_account_key_secret":{"definition":{"name":"storage_account_key_secret","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"table_list_sql":{"definition":{"name":"table_list_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""}},"grids":{"source_tables":{"definition":{"name":"source_tables","scope":"TASKBATCH","definitions":[{"name":"source_database","type":"TEXT"},{"name":"source_schema","type":"TEXT"},{"name":"source_table","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"Sync All Tables - 1-1 - Get source tables","description":"Unpacked from Shared Job [Sync All Tables].","type":"ORCHESTRATION","tag":"c7003566-ff30-429c-a23f-a0cb9f362ac6"}}