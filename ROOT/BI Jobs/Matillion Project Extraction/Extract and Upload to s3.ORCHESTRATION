{"job":{"components":{"1228536":{"id":1228536,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-384,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Extract project JSON and Upload to s3"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests, boto3, json, datetime, os, re\n\ns3 = boto3.resource('s3')\n\nurl = v_restAPIURL + v_groupName + \"/project/name/\" + v_projectName + \"/version/name/default/export\"\nurl.replace(' ', '%20')\n#print(url)\n\n# extract project JSON\npayload = {}\nheaders = {\n    'Authorization': 'Basic ' + v_token\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload, timeout=10000)\nprint (response.json())\n\n# add datetime to file to make it unique, also use project name as filename.\nnewFilename = re.sub(r\"\\s+\", '-', v_projectName)\nsuffix = datetime.datetime.now().strftime(\"%y%m%d_%H%M%S\")\nfilename = \"\".join([newFilename, '-', suffix,'.json']) \npathFilename = \"\".join(['/tmp/',filename])\n#print(pathFilename)\n\n# upload to s3\nopen(pathFilename,'w').write(json.dumps(response.json()))\n\ns3.meta.client.upload_file(pathFilename,v_s3bucketName,v_s3bucketFolderName + '/' + filename)\n\nprint ('File ',filename,' sucessfully loaded.')\n\n# remove the file from /tmp\nos.remove(pathFilename)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 2"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"10000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[1228515]},"1228537":{"id":1228537,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-928,"y":-32,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[1228514,1228541],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1228539":{"id":1228539,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-688,"y":-32,"width":32,"height":32,"inputConnectorIDs":[1228514],"outputSuccessConnectorIDs":[1228540],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get Project Names in Group"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests, json\nfrom pprint import pprint\n\nurl = v_restAPIURL + v_groupName + \"/project\"\nurl.replace(' ', '%20')\n\nprint(\"Return projects for Group: \" + v_groupName + \"\\n\")\n\n# extract project JSON\npayload = {}\nheaders = {\n  'Authorization': 'Basic ' + v_token\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload, timeout=10000)\n#print(response.json())\n\noutput_jp = []\n\nfor jp in response.json():\n  if jp.startswith('Phil Zdesenko'):    # just for testing, loading just the Examples project.\n    output_jp.append([jp])\n\nprint(\"Projects are; \" + \"\\n\")\npprint(output_jp)       \n\ncontext.updateGridVariable('gv_projectNames', output_jp)\n\n# print context.getGridVariable('gv_projectNames')\n\n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 2"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"10000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1228542":{"id":1228542,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"ITERATE","implementationID":-424773870,"x":-384,"y":-32,"width":32,"height":16,"inputConnectorIDs":[1228540],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Grid Iterator 0"}}}},"visible":true},"3":{"slot":3,"name":"Grid Variable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"gv_projectNames"}}}},"visible":true},"4":{"slot":4,"name":"Grid Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"projectName"},"2":{"slot":2,"type":"STRING","value":"v_projectName"}}}},"visible":true},"5":{"slot":5,"name":"Break on Failure","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"6":{"slot":6,"name":"Concurrency","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sequential"}}}},"visible":true},"7":{"slot":7,"name":"Stop on Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"8":{"slot":8,"name":"Stop Condition Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":false},"9":{"slot":9,"name":"Condition","elements":{},"visible":false},"10":{"slot":10,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"11":{"slot":11,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"999":{"slot":999,"name":"Record Values In Task History","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[1228515],"inputIterationConnectorIDs":[]},"1228543":{"id":1228543,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-30576485,"x":-928,"y":80,"width":32,"height":32,"inputConnectorIDs":[1228541],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Bash Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are exported into bash, but should be considered read-only: \n#    echo $myvar\n###\n#cat /tmp/Iora.json\n#rm /tmp/Iora.json\nls -l /tmp\n#cat /tmp/matillion_project*\n#rm /tmp/Mobil*\n#ls -l /tmp/matillion_proj*"}}}},"visible":true},"3":{"slot":3,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"4":{"slot":4,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"1228540":{"id":1228540,"sourceID":1228539,"targetID":1228542}},"failureConnectors":{},"unconditionalConnectors":{"1228514":{"id":1228514,"sourceID":1228537,"targetID":1228539},"1228541":{"id":1228541,"sourceID":1228537,"targetID":1228543}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{"1228515":{"id":1228515,"sourceID":1228542,"targetID":1228536}},"noteConnectors":{},"notes":{"1228532":{"id":1228532,"x":-1529,"y":-176,"width":521,"height":219,"text":"``In order to generate the Authorization token, steps are;``\n\n1. Make a note of the username and password used to log into this METL instance.\n2. Encrypt it using;\n\n$b  = [System.Text.Encoding]::UTF8.GetBytes(\"<username>:<pwd\")\n[System.Convert]::ToBase64String($b)\n\n3. Place the token into the job variable v_token.\n\n4. You can also adjust the first python script to only bring back certain projects.\n\n5. Leave the URL as it is.","colour":"d60000"},"1228533":{"id":1228533,"x":-440,"y":97,"width":250,"height":58,"text":"``TEST URLS``\n\n#url = \"http://127.0.0.1:8080/rest/v1/group/name/Implementation Team Development/project/name/Iora Health Migration/version/name/default/export\"\n#url = \"http://127.0.0.1:8080/rest/v1/group/name/Implementation%20Team%20Development/project/name/Iora%20Health%20Migration/version/name/default/export\"\n#url = \"http://127.0.0.1:8080/rest/v1/group/name/Implementation%20Team%20Development/project/name/fresca/version/name/default/export\"\n#url = \"http://127.0.0.1:8080/rest/v1/group/name/Implementation Team Development/project/name/fresca/version/name/default/export\"\n","colour":"e6e63c"},"1228538":{"id":1228538,"x":-944,"y":-185,"width":361,"height":89,"text":"``Job Variable``\n\nJust need to supply the v_groupName variable value. \n\n***Need to add initial cleanup of s3 bucket folder","colour":"e6e63c"}},"variables":{"v_groupName":{"definition":{"name":"v_groupName","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"Demonstration Projects"},"v_projectName":{"definition":{"name":"v_projectName","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"Phil Zdesenko"},"v_restAPIURL":{"definition":{"name":"v_restAPIURL","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"http://127.0.0.1:8080/rest/v1/group/name/"},"v_s3bucketFolderName":{"definition":{"name":"v_s3bucketFolderName","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"project_jsons"},"v_s3bucketName":{"definition":{"name":"v_s3bucketName","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"bi-services-testing-pz-sf-s3bucket-tfpgc8an36yd"},"v_token":{"definition":{"name":"v_token","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"ZWMyLXVzZXI6aS0wZWNjNGQ2ZTM0ZWVjNjc4OQ=="}},"grids":{"gv_projectNames":{"definition":{"name":"gv_projectNames","scope":"BRANCH","definitions":[{"name":"projectName","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"Extract and Upload to s3","description":null,"type":"ORCHESTRATION","tag":"4a680003-9aa8-49b1-8109-b899bb762eac"}}