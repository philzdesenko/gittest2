{"job":{"components":{"79878":{"id":79878,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":356330947,"x":-496,"y":-64,"width":32,"height":32,"inputConnectorIDs":[79862],"outputSuccessConnectorIDs":[79858],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Parse target table metadata to grid variable"}}}},"visible":true},"2":{"slot":2,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_database}"}}}},"visible":true},"3":{"slot":3,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_schema}"}}}},"visible":true},"5":{"slot":5,"name":"Grid Variable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_metadata"}}}},"visible":true},"6":{"slot":6,"name":"Grid Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Name"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Type"}}}},"visible":true},"7":{"slot":7,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_table_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79879":{"id":79879,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-1056,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79853],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[79860],"outputFalseConnectorIDs":[79865],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Incremental column defined"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"incremental_column_count"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"1"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79880":{"id":79880,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1936,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[79869],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79881":{"id":79881,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1877341222,"x":-304,"y":-64,"width":32,"height":32,"inputConnectorIDs":[79858],"outputSuccessConnectorIDs":[79859],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check metadata match"}}}},"visible":true},"2":{"slot":2,"name":"stage_table_name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${stage_table_name}"}}}},"visible":true},"3":{"slot":3,"name":"stage_table_metadata","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"stage_table_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"type"}}}},"visible":true},"4":{"slot":4,"name":"target_table_name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_table_name}"}}}},"visible":true},"5":{"slot":5,"name":"target_table_metadata","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"target_table_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"},"2":{"slot":2,"type":"GRID","value":"type"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79882":{"id":79882,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-231597910,"x":-144,"y":-64,"width":32,"height":32,"inputConnectorIDs":[79859],"outputSuccessConnectorIDs":[79856],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check audit columns exist"}}}},"visible":true},"2":{"slot":2,"name":"table_name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${target_table_name}"}}}},"visible":true},"3":{"slot":3,"name":"required_columns","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MATILLION_BATCH_ID"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"MATILLION_UPDATED_TIMESTAMP"}}}},"visible":true},"4":{"slot":4,"name":"actual_columns","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"target_table_metadata"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"column_name"}}}},"visible":true},"5":{"slot":5,"name":"table_description","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target"}}}},"visible":true},"6":{"slot":6,"name":"columns_description","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"audit"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79883":{"id":79883,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-688,"y":-64,"width":32,"height":32,"inputConnectorIDs":[79854],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[79862],"outputFalseConnectorIDs":[79864],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table exists"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_exists"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79884":{"id":79884,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":288,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79864,79865,79867],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[79866],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Join paths for full load"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79885":{"id":79885,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1296,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79899],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success: Load strategy set to full"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79886":{"id":79886,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1296,"y":16,"width":32,"height":32,"inputConnectorIDs":[79851],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success: Load strategy set to incremental"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79887":{"id":79887,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1776,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79869],"outputSuccessConnectorIDs":[79857],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check stage table created"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stage_table_metadata = context.getGridVariable('stage_table_metadata')\n\nif not stage_table_metadata:\n    raise Exception(f'Unable to read stage table metadata. Check that table \"{stage_table_name}\" has been created.')\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79888":{"id":79888,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1296,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79855],"outputSuccessConnectorIDs":[79853],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Define platform specific SQL"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if target_platform == 'Redshift':\n    \n    check_table_sql = (\"SELECT count(*) AS table_exists \" +\n                       \"FROM pg_catalog.svv_tables \" +\n                      f\"WHERE lower(table_schema) = lower('{target_schema}') \" +\n                      f\"AND lower(table_name) = lower('{target_table_name}')\")\n    \n    check_data_sql = ('SELECT count(1) AS contains_data ' +\n                     f'FROM \"{target_schema}\".\"{target_table_name}\" ' +\n                      'LIMIT 1')\n    \n    if incremental_column:\n    \n        get_max_sql = (f'SELECT max(\"{incremental_column_target}\") as max_value ' +\n                       f'FROM \"{target_schema.lower()}\".\"{target_table_name}\"')\n        \nelif target_platform == 'BigQuery':\n    \n    check_table_sql = (\"SELECT count(*) AS table_exists \" +\n                    f\"FROM `{target_project}`.`{target_dataset}`.__TABLES__ \" +\n                    f\"WHERE dataset_id = '{target_dataset}' \" +\n                    f\"AND table_id = '{target_table_name}'\")\n\n    check_data_sql = ('SELECT CASE WHEN row_count = 0 THEN 0 ELSE 1 END AS contains_data ' +\n                    f'FROM `{target_project}`.`{target_dataset}`.__TABLES__ ' +\n                    f\"WHERE table_id = '{target_table_name}'\")\n    \n    if incremental_column:\n\n        get_max_sql = (f'SELECT max(`{incremental_column_target}`) as max_value ' + \n                       f'FROM `{target_project}`.`{target_dataset}`.`{target_table_name}`')\n\nelif target_platform == 'Snowflake':\n\n    check_table_sql = ('SELECT count(*) AS \"TABLE_EXISTS\" ' +\n                       f'FROM \"{target_database}\".INFORMATION_SCHEMA.TABLES ' +\n                      f\"WHERE TABLE_SCHEMA = '{target_schema}' \" +\n                      f\"AND TABLE_NAME = '{target_table_name}'\")\n    \n    check_data_sql = ('SELECT count(1) AS \"CONTAINS_DATA\" ' +\n                     f'FROM \"{target_database}\".\"{target_schema}\".\"{target_table_name}\" ' +\n                      'LIMIT 1')\n    \n    if incremental_column:\n        get_max_sql = (f'SELECT max(\"{incremental_column_target}\") as \"MAX_VALUE\" ' +\n                       f'FROM \"{target_database}\".\"{target_schema}\".\"{target_table_name}\"')\n        \ncontext.updateVariable(\"check_table_sql\", check_table_sql)\ncontext.updateVariable(\"check_data_sql\", check_data_sql)\ncontext.updateVariable(\"get_max_sql\", get_max_sql)\n\nprint(f\"check_table_sql: {check_table_sql}\")\nprint(f\"check_data_sql: {check_data_sql}\")\nprint(f\"get_max_sql: {get_max_sql}\")\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79889":{"id":79889,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1552,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79857],"outputSuccessConnectorIDs":[79855],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check incremental column data type"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import re\n\n## Replace table_name with table_source \n## table_source is defined as the escaped table_name when the default value for \n## encloseTableString (true) is specified \n## otherwise, it is assumed that the table_name has already been escaped and sets the source to \n## directly the table_name \nif encloseTableString.lower() == 'true':\n  \ttable_source = f\"{source_enclosing_char_s}{table_name}{source_enclosing_char_e}\"\nelse:\n    table_source = table_name\n\ncontext.updateVariable(\"table_source\", table_source)\nprint(f'Source table is \"{table_source}\"')\n\n# if incremental column defined, get data type from grid variable\nif incremental_column:\n\n    # convention to store tables in snowflake as UPPER CASE to prevent issues with\n    # the paramater: QUOTED_IDENTIFIERS_IGNORE_CASE\n    if target_platform.lower()=='snowflake':\n        incremental_column_target = incremental_column.upper()\n\n    # bigquery can only store letters, numbers and underscores in table names, set to lower\n    elif target_platform.lower() =='bigquery':\n        pat = re.compile('[^0-9a-zA-Z_]')\n        incremental_column_target = pat.sub(\"_\", incremental_column.lower())   \n          \n    # redshift defaults to lower case in all instances   \n    elif target_platform.lower() =='redshift':\n        incremental_column_target = incremental_column.lower() \n\n    stage_table_metadata = context.getGridVariable('stage_table_metadata')\n    inc_col_type = [data_type.lower() for [col, data_type] in stage_table_metadata if col == incremental_column_target][0]\n    \n    datetime_type = inc_col_type in ('datetime', 'timestamp')\n    date_type = inc_col_type in ('date')\n    numeric_type = inc_col_type in ('numeric', 'smallint', 'integer', 'bigint', 'real', 'double precision', 'number', 'float')\n        \n    context.updateVariable(\"incremental_column_target\", incremental_column_target)\n    context.updateVariable(\"inc_col_type\", inc_col_type)\n    print(f\"Incremental column is {incremental_column_target} with type {inc_col_type}.\")\n    \n    # confirm if data type is ok; skip_inc_col_check can be used to override if the inc col is valid \n    # but doesnt match the data typing criteria.\n    if any((datetime_type, date_type, numeric_type)) or skip_inc_col_check == 'Y':\n        print(\"Performing an incremental load.\")\n    \n    # else reset incremental column variables to perform full load\n    else:\n        print(\"Unable to perform an incremental load on this column, running a full load instead.\")\n        context.updateVariable('incremental_column', '')\n        context.updateVariable('incremental_column_target', '')\n        context.updateVariable('incremental_column_count', 0)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79890":{"id":79890,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1024,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79861],"outputSuccessConnectorIDs":[79899],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set load strategy to full"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load_strategy = 'TRUNCATE INSERT'\ncontext.updateVariable('load_strategy', load_strategy)\nprint(f\"The load strategy is '{load_strategy}'\")\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79891":{"id":79891,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":784,"y":16,"width":32,"height":32,"inputConnectorIDs":[79900],"outputSuccessConnectorIDs":[79852],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Define stage_sql for incremental load"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"# we already know that inc_col_type is either date(time) or numeric\n# if it is a date, enclose max_value with quotes\nif inc_col_type in ('datetime', 'timestamp', 'date'):\n\n    # fix only required for BQ timestamp objects (so far I have seen)\n    if target_platform == 'BigQuery' and inc_col_type=='timestamp':\n        from datetime import datetime as dt\n        # get timestamp\n        new_value = float(max_value)\n        # create a date object and format as required \n        _date = dt.fromtimestamp(new_value).isoformat(sep = ' ', timespec = timestamp_precision)\n        print(f\"Parsed timestamp ({max_value}) to {_date}.\")\n    else:\n        _date = max_value\n\n    # if safely_cast_datetime_to_date is true, remove time portion if it is zero\n    if safely_cast_datetime_to_date.lower() == 'y':\n        \n        full_datetime = datetime.strptime(_date, '%Y-%m-%d %H:%M:%S.%f')\n        \n        # if time is zero, remove it from max_datetime\n        if full_datetime.time() == time(0):\n            _date = full_datetime.date().isoformat()\n            print(f'Safely cast \"{full_datetime}\" to \"{_date}\".')\n            \n    stage_sql = \\\n    f\"\"\"\n    SELECT \n    \t{source_column_list}\n    FROM\n    \t{table_source}\n    WHERE\n    \t{source_enclosing_char_s}{incremental_column}{source_enclosing_char_e} > '{_date}'\n    \"\"\"\nelse:\n    stage_sql = \\\n    f\"\"\"\n    SELECT \n    \t{source_column_list}\n    FROM\n    \t{table_source}\n    WHERE\n    \t{source_enclosing_char_s}{incremental_column}{source_enclosing_char_e} > {max_value}\n    \"\"\"\n\ncontext.updateVariable('stage_sql', stage_sql)\nprint(f\"stage_sql: {stage_sql}\")\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79892":{"id":79892,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":288,"y":16,"width":32,"height":32,"inputConnectorIDs":[79898],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[79863],"outputFalseConnectorIDs":[79867],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target contains data"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_contains_data"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79893":{"id":79893,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":784,"y":-240,"width":32,"height":32,"inputConnectorIDs":[79866],"outputSuccessConnectorIDs":[79861],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Define stage_sql for full load"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stage_sql = f\"SELECT {source_column_list} FROM {table_source}\"\n\ncontext.updateVariable('stage_sql', stage_sql)\nprint(f\"stage_sql: {stage_sql}\")\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79894":{"id":79894,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1040,"y":16,"width":32,"height":32,"inputConnectorIDs":[79852],"outputSuccessConnectorIDs":[79851],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set load strategy to insert or upsert"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if key_column_count == 0:\n    load_strategy = 'APPEND INSERT'\nelse:\n    load_strategy = 'UPDATE'\n\ncontext.updateVariable('load_strategy', load_strategy)\nprint(f\"The load strategy is '{load_strategy}'\")\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79895":{"id":79895,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":544,"y":16,"width":32,"height":32,"inputConnectorIDs":[79863],"outputSuccessConnectorIDs":[79900],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get current MAX value from existing target"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${get_max_sql}"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"max_value"},"2":{"slot":2,"type":"STRING","value":"MAX_VALUE"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79896":{"id":79896,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":-832,"y":-64,"width":32,"height":32,"inputConnectorIDs":[79860],"outputSuccessConnectorIDs":[79854],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check target table exists"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${check_table_sql}"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_exists"},"2":{"slot":2,"type":"STRING","value":"TABLE_EXISTS"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"79897":{"id":79897,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":80,"y":16,"width":32,"height":32,"inputConnectorIDs":[79856],"outputSuccessConnectorIDs":[79898],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get 1 record from target"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${check_data_sql}\n"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"target_table_contains_data"},"2":{"slot":2,"type":"STRING","value":"CONTAINS_DATA"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"79851":{"id":79851,"sourceID":79894,"targetID":79886},"79852":{"id":79852,"sourceID":79891,"targetID":79894},"79853":{"id":79853,"sourceID":79888,"targetID":79879},"79854":{"id":79854,"sourceID":79896,"targetID":79883},"79855":{"id":79855,"sourceID":79889,"targetID":79888},"79856":{"id":79856,"sourceID":79882,"targetID":79897},"79857":{"id":79857,"sourceID":79887,"targetID":79889},"79858":{"id":79858,"sourceID":79878,"targetID":79881},"79859":{"id":79859,"sourceID":79881,"targetID":79882},"79861":{"id":79861,"sourceID":79893,"targetID":79890},"79898":{"id":79898,"sourceID":79897,"targetID":79892},"79899":{"id":79899,"sourceID":79890,"targetID":79885},"79900":{"id":79900,"sourceID":79895,"targetID":79891}},"failureConnectors":{},"unconditionalConnectors":{"79866":{"id":79866,"sourceID":79884,"targetID":79893},"79869":{"id":79869,"sourceID":79880,"targetID":79887}},"trueConnectors":{"79860":{"id":79860,"sourceID":79879,"targetID":79896},"79862":{"id":79862,"sourceID":79883,"targetID":79878},"79863":{"id":79863,"sourceID":79892,"targetID":79895}},"falseConnectors":{"79864":{"id":79864,"sourceID":79883,"targetID":79884},"79865":{"id":79865,"sourceID":79879,"targetID":79884},"79867":{"id":79867,"sourceID":79892,"targetID":79884}},"iterationConnectors":{},"noteConnectors":{},"notes":{"79844":{"id":79844,"x":-906,"y":-186,"width":853,"height":196,"text":"**Parse target table metadata**\n\nIf target table exists, check that stage and target metadata match\nElse full load required","colour":"e6e63c"},"79846":{"id":79846,"x":215,"y":-362,"width":931,"height":196,"text":"**Set load strategy to full**\n\nIf target table doesn't exist, is empty or no incremental column defined, then perform full load from the source into target, where the target schema is set to match the staged source schema.","colour":"e6e63c"},"79847":{"id":79847,"x":-1861,"y":-389,"width":180,"height":189,"text":"**Check stage table created**\n\nIf the stage table has not been created, the stage_table_metadata grid variable will be empty","colour":"e6e63c"},"79848":{"id":79848,"x":-1404,"y":-390,"width":229,"height":192,"text":"**Define platform specific SQL**\n+ check_table_sql : Checks whether a table exists in the target\n+ get_max_sql :Get the MAX value for the specified incremental column (if specified)\n+ check_data_sql : Checks whether a table contains any data (i.e rows > 0 )\nEnable one package to be migrated to different cloud data warehouses","colour":"e6e63c"},"79849":{"id":79849,"x":-1655,"y":-390,"width":226,"height":191,"text":"**Check incremental column type**\n\nIf incremental column data type is not a date or numeric, then ignore it and perform full load. A numeric is allowed but the user must ensure it is a valid incremental value otherwise data may not be updated post initial load (i.e., a date or datetime held as a numeric).","colour":"e6e63c"},"79850":{"id":79850,"x":-1653,"y":-170,"width":382,"height":166,"text":"**10-12-2019: **Job Variable **max_value** changed to public so it can be exported\n                      Added job var** skip_inc_col_check **(default to N) for special cases wher inc col is known and may be a text data type.","colour":"f9c21b"},"79872":{"id":79872,"x":19,"y":-16,"width":113,"height":40,"text":"**SQL: check_data_sql**","colour":"f9c21b"},"79873":{"id":79873,"x":-891,"y":-98,"width":115,"height":40,"text":"**SQL: check_table_sql**","colour":"f9c21b"},"79874":{"id":79874,"x":-1145,"y":-391,"width":180,"height":193,"text":"**Incremental column defined**\n\nIf incremental column defined perform some extra validation\nElse go straight to full load","colour":"e6e63c"},"79875":{"id":79875,"x":497,"y":-20,"width":94,"height":40,"text":"**SQL: get_max_sql**","colour":"f9c21b"},"79876":{"id":79876,"x":-29,"y":-106,"width":406,"height":194,"text":"**Check target contains data**\n\nTry to read a single record from the target and export row count into variable target_contains_data\nIf the target contains data, then perform incremental load\nElse perform full load","colour":"e6e63c"},"79877":{"id":79877,"x":421,"y":-108,"width":724,"height":197,"text":"**Set load strategy to incremental**\n\nThe target already exists and contains data so run an incremental load from the source into target using the specified incremental column in the SQL as the high tide (MAX) mark. The SQL is formatted according to the datatype of the incremental column.\n\nIf no key(s) are defined, the target table is fully loaded; otherwise use the high tide (MAX) mark to stage and UPSERT.\n","colour":"e6e63c"}},"variables":{"check_data_sql":{"definition":{"name":"check_data_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"check_table_sql":{"definition":{"name":"check_table_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"encloseTableString":{"definition":{"name":"encloseTableString","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"TRUE"},"get_max_sql":{"definition":{"name":"get_max_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":null},"inc_col_type":{"definition":{"name":"inc_col_type","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"incremental_column":{"definition":{"name":"incremental_column","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"incremental_column_count":{"definition":{"name":"incremental_column_count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"0"},"incremental_column_target":{"definition":{"name":"incremental_column_target","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"key_column_count":{"definition":{"name":"key_column_count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"load_strategy":{"definition":{"name":"load_strategy","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"max_value":{"definition":{"name":"max_value","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"safely_cast_datetime_to_date":{"definition":{"name":"safely_cast_datetime_to_date","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"N"},"skip_inc_col_check":{"definition":{"name":"skip_inc_col_check","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"N"},"source_column_list":{"definition":{"name":"source_column_list","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_enclosing_char_e":{"definition":{"name":"source_enclosing_char_e","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"\""},"source_enclosing_char_s":{"definition":{"name":"source_enclosing_char_s","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"\""},"stage_sql":{"definition":{"name":"stage_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"stage_table_name":{"definition":{"name":"stage_table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"table_name":{"definition":{"name":"table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"table_source":{"definition":{"name":"table_source","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"target_database":{"definition":{"name":"target_database","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_dataset":{"definition":{"name":"target_dataset","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_platform":{"definition":{"name":"target_platform","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_project":{"definition":{"name":"target_project","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_schema":{"definition":{"name":"target_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"target_table_contains_data":{"definition":{"name":"target_table_contains_data","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"0"},"target_table_exists":{"definition":{"name":"target_table_exists","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"target_table_name":{"definition":{"name":"target_table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"timestamp_precision":{"definition":{"name":"timestamp_precision","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"microseconds"}},"grids":{"stage_table_metadata":{"definition":{"name":"stage_table_metadata","scope":"TASKBATCH","definitions":[{"name":"column_name","type":"TEXT"},{"name":"type","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]},"target_table_metadata":{"definition":{"name":"target_table_metadata","scope":"TASKBATCH","definitions":[{"name":"column_name","type":"TEXT"},{"name":"type","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]}}},"info":{"name":"Incremental lib - Decide load strategy","description":"Unpacked from Shared Job [Decide Load Strategy].","type":"ORCHESTRATION","tag":"05433e5f-c0b0-4964-aafc-e342d0757eba"}}