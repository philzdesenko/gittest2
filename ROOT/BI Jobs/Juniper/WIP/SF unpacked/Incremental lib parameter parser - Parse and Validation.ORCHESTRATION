{"job":{"components":{"1227680":{"id":1227680,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-880,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[1227704],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227681":{"id":1227681,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":400,"y":166,"width":32,"height":32,"inputConnectorIDs":[1227706],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Raise Error for Columns"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"class ColumnCountError(Exception):\n  pass \n\nraise ColumnCountError(\"No columns have been specified!\")"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227682":{"id":1227682,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1200,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227701],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Fin"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227683":{"id":1227683,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-400,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227694],"outputSuccessConnectorIDs":[1227692],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set Key Columns"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if is_incremental == 'TRUE':\n  v = source_list_var\n  is_table = lambda x: x[0].lower() == table_name.lower()\n  is_key = lambda x: str(x[3]) == '1'\n  \n  class PlatformError(Exception):\n    pass \n  \n  if target_platform.lower()=='redshift':\n    formatter = lambda x: x.lower()\n  elif target_platform.lower() =='bigquery':\n    formatter = lambda x: x.lower().replace(' ','_')\n  elif target_platform.lower() =='snowflake':\n    formatter = lambda x: x.upper()\n  else:\n    raise PlatformError(\"Matillion ETL is currently only supported on Redshift/Snowflake/BigQuery - not %s\" % target_platform)\n  \n  key_cols = [ [formatter(x[1])] for x in context.getGridVariable(v) if is_table(x) and is_key(x) ]\n  \n  context.updateGridVariable('key_columns',key_cols)\n  context.updateVariable('key_column_count',len(key_cols))\n  msg=\\\n  \"\"\"\nUpdated Grid Variable 'key_columns' with: {k}\nUpdated Variable 'key_column_count' with: {count}\n\"\"\".format(k = key_cols,\n           count = key_column_count)\n  print(msg)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227684":{"id":1227684,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-560,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227688],"outputSuccessConnectorIDs":[1227694],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set Source List"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"def truncate(word, length = 12):\n    if len(word.strip()) <= length:\n        return word\n    return \"{}...\".format( word[:(length-3)] )\n\n\ndef stringer(lst, colwidth = 15):\n  msgs = [] \n  add_msg = lambda x: msgs.append(x)\n  for row in lst:\n    msg = \" | \".join(\n    \t[\n        \"{:<{width}}\".format( truncate(str(x)), width = colwidth)\n        for x in row \n        ]\n    )\n    add_msg(msg)\n    \n  return \"\\n\" + \"\\n\".join(msgs)\n\n\nis_table = lambda x: x[0].lower() == table_name.lower()\nprint('Looking at {source_list_var} grid variable.'.format(source_list_var = source_list_var))\nfor x in context.getGridVariable(source_list_var):\n  print(x)\n  \nsrc = [x for x in context.getGridVariable(source_list_var) if is_table(x)]\n\nsource_output = source_list_var\n\ncontext.updateVariable('column_count',len(src))\ncontext.updateGridVariable(source_output,src)\n\nif is_incremental =='FALSE':\n  context.updateVariable('incremental_column_count', 0)\nelse:\n  inc_cols = [x for x in context.getGridVariable(source_output) if str(x[2]) == '1']\n  print(\"Found incremental columns: %s\" % inc_cols)\n  val = len(inc_cols)\n  context.updateVariable('incremental_column_count',val)\n  if val > 0 :\n    inc_col = inc_cols[0][1]\n    context.updateVariable('incremental_column',inc_col)\n  else:\n    context.updateVariable('incremental_column','')\n    \n  \nmsg=\\\n\"\"\"Updated Grid Variable '{source_output}' with: {src}\nUpdated Variable 'column_count' with: {column_count}\nUpdated Variable 'incremental_column_count' with: {incremental_column_count}\n\"\"\".format(source_output = source_output, \n           src = stringer(src), \n           column_count = column_count,\n           incremental_column_count = incremental_column_count)\n\ninc_col_valid = [\n  [ 'incremental_column_count', 'Is', 'Less than or equal to', max_incremental_columns ]\n  ]\n\n\nprint(msg)\n\ncontext.updateGridVariable('incremental_column_validator',inc_col_valid)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227685":{"id":1227685,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":400,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227689],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[1227703],"outputFalseConnectorIDs":[1227706],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Column Count > 0"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"column_count"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227686":{"id":1227686,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-240,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227692],"outputSuccessConnectorIDs":[1227695],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Generate Column List"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import warnings \n# Wraps column names in relevant characters\nwrapper = lambda x: \"\"\"{s}{val}{e}\"\"\".format(s = source_enclosing_char_s,val = x, e = source_enclosing_char_e)\n\nif target_platform.lower()=='snowflake':\n  # store columns as upper case in Snowflake \n  formatter = lambda x: x.upper()\n  \nelif target_platform.lower() =='bigquery':\n  # BigQuery does not allow for spaces\n  # Convention is to store columns in lower\n  formatter = lambda x: x.lower().replace(' ','_')\n  \nelif target_platform.lower() == 'redshift':\n  formatter = lambda x: x.lower()\n\n\nv =source_list_var\ncols = [x[1] for x in context.getGridVariable(v)]\n\nencode_error = False\n\ntry:\n  slct = [\"\"\"{x} as {y}\"\"\".format( x = wrapper(x), y = wrapper(formatter(x)) ) for x in cols]\nexcept UnicodeEncodeError as e:\n  encode_error = True \n  warnings.warn(\"There is a potential issue with the encoding of the input you have provided:\\n%s\" % e)\n  slct = [\"\"\"{x}\"\"\".format( x = wrapper(x) ) for x in cols]\n  \nslct_str = \",\\n\".join(slct)\nprint(\"Select string pre assignment: %s\" % slct_str)\ncontext.updateVariable('SELECT_STRING',slct_str)\n\nif encode_error:\n    msg=\\\n\"\"\"Variable 'SELECT_STRING' updated with: {SELECT_STRING}\n\"\"\".format(SELECT_STRING = SELECT_STRING.encode('utf-8'))\nelse:\n  msg=\\\n\"\"\"Variable 'SELECT_STRING' updated with: {SELECT_STRING}\n\"\"\".format(SELECT_STRING = SELECT_STRING)\n\nprint(msg)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227687":{"id":1227687,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":80,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227695],"outputSuccessConnectorIDs":[1227689],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Generic SQL Queries"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"## builds 1 query and sets it to the following variable:\n##\n##    - get_metadata_sql : Fetches columns from the 'metadata' table created during jobs\n\ndef pretty(*args):\n  msgs = []\n  apnd = lambda x: msgs.append(x)\n  for k in args:\n    apnd(\",\".join(k))\n  msg = \";\\n\".join(msgs)\n  return msg\n\nif target_platform.lower() == 'redshift':\n\n  compare_table_names = [\n        ['stage_schema', 'Is', 'Equal to', '${target_schema}'],\n        ['stage_table_name', 'Is', 'Equal to', '${target_table_name}']\n    ]\n  \n  get_metadata_sql=\\\n\"\"\"\nSELECT\n\tcolumnname as column_name\nFROM\n\t\"{stage_schema}\".\"{metadata_stage_table_name}\"\n\"\"\".format(**{\n    'stage_schema':stage_schema,\n    'metadata_stage_table_name':metadata_stage_table_name\n    })\n\nelif target_platform.lower()== 'bigquery':\n\n  compare_table_names = [\n        ['stage_dataset', 'Is', 'Equal to', '${target_dataset}'],\n        ['stage_table_name', 'Is', 'Equal to', '${target_table_name}']\n    ]\n\n  get_metadata_sql = \\\n\"\"\"\nSELECT\n    columnname as column_name\nFROM\n    `{stage_project}`.`{stage_dataset}`.`{metadata_stage_table_name}`\n\"\"\".format(**{\n'stage_project': stage_project,\n'stage_dataset': stage_dataset,\n'metadata_stage_table_name': metadata_stage_table_name\n})\n\nelif target_platform.lower() == 'snowflake':\n\n  compare_table_names = [\n        ['stage_schema', 'Is', 'Equal to', '${target_schema}'],\n        ['stage_table_name', 'Is', 'Equal to', '${target_table_name}']\n    ]\n\n  get_metadata_sql = \\\n\"\"\"\nSELECT\n    \"ColumnName\" AS \"COLUMN_NAME\"\nFROM\n    \"{stage_database}\".\"{stage_schema}\".\"{metadata_stage_table_name}\"\n\"\"\".format(**{\n    'stage_database': stage_database,\n    'stage_schema': stage_schema,\n    'metadata_stage_table_name': metadata_stage_table_name\n})\n\ncontext.updateGridVariable(\"compare_table_names\", compare_table_names)\ncontext.updateVariable(\"get_metadata_sql\", get_metadata_sql)\n\nmsg=\\\n\"\"\"\nUpdated Grid Variable 'compare_table_names' with: \n{cmp}\nUpdated Variable 'get_metadata_sql' with: {get_metadata_sql}\n\"\"\".format(**{'cmp':pretty(*compare_table_names),\n            'get_metadata_sql':get_metadata_sql\n           })\n\nprint(msg)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227690":{"id":1227690,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":720,"y":160,"width":32,"height":32,"inputConnectorIDs":[1227707],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Raise Error for Inc Columns"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"class IncrementalColumnCountError(Exception):\n  pass \n\nmsg=\\\n\"\"\"\nThere are too many incremental columns! \n{incremental_column_count} incremental columns specified, maximum allowed is {max_incremental_columns}!\n\"\"\".format(\n  incremental_column_count = incremental_column_count,\n  max_incremental_columns = max_incremental_columns)\n\nraise IncrementalColumnCountError(msg)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227691":{"id":1227691,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":720,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227703],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[1227702],"outputFalseConnectorIDs":[1227707],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Incremental Column Count <= max_incremental_columns"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"incremental_column_validator"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"input_variable"},"2":{"slot":2,"type":"GRID","value":"qualifier"},"3":{"slot":3,"type":"GRID","value":"comparator"},"4":{"slot":4,"type":"GRID","value":"value"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227696":{"id":1227696,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1040,"y":160,"width":32,"height":32,"inputConnectorIDs":[1227693],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Raise Error for Location"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"class TargetLocationError(Exception):\n  pass \n\n\nraise TargetLocationError(\"The Target table seems to be in the same place that the data is staged!\")"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227697":{"id":1227697,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":1040,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227702],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[1227693],"outputFalseConnectorIDs":[1227701],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Stage Location <> Target Location"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"GRID","value":"compare_table_names"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"GRID","value":"input_variable"},"2":{"slot":2,"type":"GRID","value":"qualifier"},"3":{"slot":3,"type":"GRID","value":"comparator"},"4":{"slot":4,"type":"GRID","value":"value"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1227700":{"id":1227700,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-720,"y":0,"width":32,"height":32,"inputConnectorIDs":[1227704],"outputSuccessConnectorIDs":[1227688],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set Table Names"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if not target_prefix:\n  target_prefix = \"\"\ntarg_table = (target_prefix + table_name).strip()\nstage_table = (stage_prefix + table_name).strip()\nmetadata_table = stage_table +'_metadata'\n\n# convention to store tables in snowflake as UPPER CASE to prevent issues with\n# the paramater: QUOTED_IDENTIFIERS_IGNORE_CASE\nif target_platform.lower()=='snowflake':\n  targ_table = targ_table.upper()\n  stage_table = stage_table.upper()\n  metadata_table = metadata_table.upper()\n  \n# bigquery cannot store spaces in table names \nelif target_platform.lower() =='bigquery':\n  targ_table = targ_table.replace(' ','_')  \n  stage_table = stage_table.replace(' ','_')\n  metadata_table = metadata_table.replace(' ','_')\n  \n# redshift defaults to lower case in all instances   \nelif target_platform.lower() =='redshift':\n  targ_table = targ_table.lower() \n  stage_table = stage_table.lower() \n  metadata_table = metadata_table.lower()\n  \ncontext.updateVariable('target_table_name',targ_table)\ncontext.updateVariable('stage_table_name',stage_table)\ncontext.updateVariable('metadata_stage_table_name',metadata_table)\n\nmsg =\\\n\"\"\"\nUpdated Variable 'target_table_name' with {target_table_name}\nUpdated Variable 'stage_table_name' with {stage_table_name}\nUpdated Variable 'metadata_stage_table_name' with {metadata_stage_table_name}\n\"\"\".format(**{\n  'target_table_name': target_table_name,\n  'stage_table_name': stage_table_name,\n  'metadata_stage_table_name':metadata_stage_table_name\n  })\n\nprint(msg)\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"1227688":{"id":1227688,"sourceID":1227700,"targetID":1227684},"1227689":{"id":1227689,"sourceID":1227687,"targetID":1227685},"1227692":{"id":1227692,"sourceID":1227683,"targetID":1227686},"1227694":{"id":1227694,"sourceID":1227684,"targetID":1227683},"1227695":{"id":1227695,"sourceID":1227686,"targetID":1227687}},"failureConnectors":{},"unconditionalConnectors":{"1227704":{"id":1227704,"sourceID":1227680,"targetID":1227700}},"trueConnectors":{"1227693":{"id":1227693,"sourceID":1227697,"targetID":1227696},"1227702":{"id":1227702,"sourceID":1227691,"targetID":1227697},"1227703":{"id":1227703,"sourceID":1227685,"targetID":1227691}},"falseConnectors":{"1227701":{"id":1227701,"sourceID":1227697,"targetID":1227682},"1227706":{"id":1227706,"sourceID":1227685,"targetID":1227681},"1227707":{"id":1227707,"sourceID":1227691,"targetID":1227690}},"iterationConnectors":{},"noteConnectors":{},"notes":{"1227661":{"id":1227661,"x":-789,"y":-154,"width":626,"height":232,"text":"** Set job and grid variables**\n\n+ Sets the table names to the correct format for each of the platforms\n+ Filters the __source_list or incremental_source_list __grid variable to the table in the iteration. Dependent on job variable **source_list_var** defined by the calling process, either source_list or incremental_source_list will be used. \n+ Sets the **key_columns** grid variable which is used in job **Transformation - UPSERT** as required\n+ Generates the SELECT_STRING variable for fetching the specific column names from source based on the grid variable__ source_list__.","colour":"e6e63c"},"1227698":{"id":1227698,"x":319,"y":-156,"width":820,"height":378,"text":"** Validation Checks **\n\n+ At least 1 column is being loaded \n+ Number of incremental columns < max_incremental_columns variable (default = 1)\n+ Staging and Target entity names are not the same","colour":"e6e63c"},"1227699":{"id":1227699,"x":-103,"y":-156,"width":380,"height":233,"text":"** Build generic queries **\nCreates platform specific SQL Queries which may be required for the shared job\n\n+ check_table_sql : Checks whether a table exists in the target\n+ get_metadata_sql : Fetches columns from the 'metadata' table created during the previous process.\n+ check_data_sql : Checks whether a table contains any data (i.e rows > 0 )\n+ row_count_sql : Fetches the row count of the target table","colour":"e6e63c"}},"variables":{"SELECT_STRING":{"definition":{"name":"SELECT_STRING","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"column_count":{"definition":{"name":"column_count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"get_metadata_sql":{"definition":{"name":"get_metadata_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"incremental_column":{"definition":{"name":"incremental_column","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"incremental_column_count":{"definition":{"name":"incremental_column_count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"is_incremental":{"definition":{"name":"is_incremental","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"key_column_count":{"definition":{"name":"key_column_count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"max_incremental_columns":{"definition":{"name":"max_incremental_columns","type":"DECIMAL","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"1"},"metadata_exists_query":{"definition":{"name":"metadata_exists_query","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"metadata_stage_table_name":{"definition":{"name":"metadata_stage_table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"source_enclosing_char_e":{"definition":{"name":"source_enclosing_char_e","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"\""},"source_enclosing_char_s":{"definition":{"name":"source_enclosing_char_s","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"\""},"source_list_name":{"definition":{"name":"source_list_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":""},"source_list_var":{"definition":{"name":"source_list_var","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"stage_database":{"definition":{"name":"stage_database","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"stage_dataset":{"definition":{"name":"stage_dataset","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"stage_prefix":{"definition":{"name":"stage_prefix","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"stage_project":{"definition":{"name":"stage_project","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"stage_schema":{"definition":{"name":"stage_schema","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"stage_table_name":{"definition":{"name":"stage_table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"stage_warehouse":{"definition":{"name":"stage_warehouse","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"storage_account":{"definition":{"name":"storage_account","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"table_name":{"definition":{"name":"table_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"target_database":{"definition":{"name":"target_database","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"target_dataset":{"definition":{"name":"target_dataset","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"target_platform":{"definition":{"name":"target_platform","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"target_prefix":{"definition":{"name":"target_prefix","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""},"target_project":{"definition":{"name":"target_project","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"target_schema":{"definition":{"name":"target_schema","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null},"target_table_name":{"definition":{"name":"target_table_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_warehouse":{"definition":{"name":"target_warehouse","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null}},"grids":{"compare_table_names":{"definition":{"name":"compare_table_names","scope":"BRANCH","definitions":[{"name":"input_variable","type":"TEXT"},{"name":"qualifier","type":"TEXT"},{"name":"comparator","type":"TEXT"},{"name":"value","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]},"incremental_column_validator":{"definition":{"name":"incremental_column_validator","scope":"BRANCH","definitions":[{"name":"input_variable","type":"TEXT"},{"name":"qualifier","type":"TEXT"},{"name":"comparator","type":"TEXT"},{"name":"value","type":"TEXT"}],"description":"","visibility":"PRIVATE"},"values":[]},"incremental_source_list":{"definition":{"name":"incremental_source_list","scope":"TASKBATCH","definitions":[{"name":"table","type":"TEXT"},{"name":"column","type":"TEXT"},{"name":"incremental","type":"DECIMAL"},{"name":"key","type":"DECIMAL"}],"description":"","visibility":"PUBLIC"},"values":[{"values":["Test","ColumnOne","1","1"]},{"values":["Test","ColumnTwo","0","0"]},{"values":["Check","ColumnOne","0","0"]},{"values":["Check","ColumnTwo","0","0"]},{"values":["Check","ColumnThree","1","0"]}]},"key_columns":{"definition":{"name":"key_columns","scope":"TASKBATCH","definitions":[{"name":"column_name","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]},"source_list":{"definition":{"name":"source_list","scope":"TASKBATCH","definitions":[{"name":"table","type":"TEXT"},{"name":"column","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"Incremental lib parameter parser - Parse and Validation","description":"Unpacked from Shared Job [Parameter Parser].","type":"ORCHESTRATION","tag":"0d109c4c-54a1-47f4-81f6-71e1fd5a4bbf"}}